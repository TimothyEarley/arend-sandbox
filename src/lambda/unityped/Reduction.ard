\import Data.Or
\import Logic
\import Meta
\import Paths
\import Star
\import lambda.GeneralContext
\import lambda.unityped.Lambda
\import lambda.unityped.Substitute

\data Reduction {gamma : UniContext} {A : UniType} (t : gamma u⊢ A) : \Set
\elim t
  | ⋅ f arg => R-App1 (Reduction f)
  | ⋅ f arg => R-App2 (Reduction arg)
  | ⋅ (lam body) arg => R-Beta
  | lam body => R-Lam (Reduction body)

  \where {
    \func decide {gamma : UniContext} {A : UniType} (t : gamma u⊢ A) : Or (Reduction t) (Not (Reduction t))
    \elim t
      | var l => inr (\lam r => \case r)
      | lam body => \case decide body \with {
        | inl a => inl (R-Lam a)
        | inr b => inr (\case __ \with {
          | R-Lam r => b r
        })
      }
      | ⋅ f arg => \case decide arg, decide f \with {
        | inl a, _ => inl (R-App2 a)
        | inr b, inl a => inl (R-App1 a)
        | inr b, inr b1 => \case \elim f, b1 \with {
          | lam body, _ => inl R-Beta
          | var l, _ => inr (\lam r => \case r \with {
            | R-App1 ()
            | R-App2 r1 => b r1
          })
          | ⋅ f arg1, b1 => inr (\lam r => \case r \with {
            | R-App1 r1 => b1 r1
            | R-App2 r1 => b r1
          })
        }
      }
  }

\func reduce {gamma : UniContext} {A : UniType} {t : gamma u⊢ A} (r : Reduction t) : gamma u⊢ A
\elim A, t, r
  | *, ⋅ (lam body) arg, R-Beta => sub body arg
  | *, ⋅ f arg, R-App1 r => reduce r ⋅ arg
  | *, ⋅ f arg, R-App2 r => f ⋅ reduce r
  | *, lam t, R-Lam r => lam (reduce r)
  \where {
    \func reduceApp1 {gamma : UniContext} {A : UniType} {s t : gamma u⊢ *}
                     {r : Reduction s} : reduce {gamma} {A} {s ⋅ t} (R-App1 r) = reduce r ⋅ t
    \elim A, s
      | *, var l => idp
      | *, lam s => idp
      | *, ⋅ s s1 => idp

    \func reduceApp2 {gamma : UniContext} {A : UniType} {s t : gamma u⊢ *}
                     {r : Reduction t} : reduce {gamma} {A} {s ⋅ t} (R-App2 r) = s ⋅ reduce r
    \elim A, s
      | *, var l => idp
      | *, lam s => idp
      | *, ⋅ s s1 => idp

    \func reduceLam {gamma : UniContext} {A : UniType} {s : gamma ∕ * u⊢ *}
                    {r : Reduction s} : reduce {gamma} {A} {lam s} (R-Lam r) = lam (reduce r)
    \elim A, s
      | *, var l => idp
      | *, lam s => idp
      | *, ⋅ s s1 => idp
  }

\func ReducesStep \alias \infix 5 ->1_u {gamma : UniContext} {A : UniType} (t t' : gamma u⊢ A) =>
  \Sigma (r : Reduction t) (reduce r = t')

\func idpStep {gamma : UniContext} {A : UniType} {t : gamma u⊢ A} {r : Reduction t} : t ->1_u reduce r => (r, idp)

\func Reduces \alias \infix 5 ->*_u {gamma : UniContext} {A : UniType} (t t' : gamma u⊢ A) => Star (->1_u) t t'
  \where {
    \func underLam {gamma : UniContext} {body body' : gamma ∕ * u⊢ *}
                   (h : body ->*_u body') {T : UniType} : lam body ->*_u {_} {T} lam body' =>
      Star.embedSingle h (\lam (r, p) => (R-Lam r, reduce.reduceLam *> pmap lam p))

    \func underApps {gamma : UniContext} {s s' t t' : gamma  u⊢ *}
                    (h1 : s ->*_u s') (h2 : t ->*_u t') {T : UniType} : (s ⋅ t) ->*_u {_} {T} (s' ⋅ t')
    \elim h1
      | refl idp => Star.embedSingle h2 (\lam r => (R-App2 r.1, reduce.reduceApp2 *> pmap _ r.2))
      | ~> r h1 => (R-App1 r.1, reduce.reduceApp1 *> pmap (__ ⋅ _) r.2) ~> underApps h1 h2
  }

\func eval (fuel : Nat) {A : UniType} (t : ∅ u⊢ A) : ∅ u⊢ A
\elim fuel
  | 0 => t
  | suc fuel => \case Reduction.decide t \with {
    | inl a => eval fuel (reduce a)
    | inr b => t
  }
  \where {
    \func correct {fuel : Nat} {A : UniType} {t : ∅ u⊢ A} : t ->*_u eval fuel t
    \elim fuel
      | 0 => refl idp
      | suc fuel => mcases \with {
        | inl a => idpStep ~> correct
        | inr b => refl idp
      }
  }

\func Normal {ctx : UniContext} (t : ctx u⊢ *) => Not (\Sigma (t' : ctx u⊢ *) (t ->1_u t'))