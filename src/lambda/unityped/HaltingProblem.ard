\import Function.Meta
\import Logic
\import Logic.Meta
\import Paths
\import Star
\import lambda.GeneralContext
\import lambda.unityped.Confluent
\import lambda.unityped.Examples
\import lambda.unityped.Lambda
\import lambda.unityped.Reduction
\import lambda.unityped.Substitute
\open SubstitutionAlgebra (ids-id, shift)
\open ->*_u (underApps)
\open subst-commute (sub-sub)

\func Halts (t : ∅ u⊢ *) : \Prop => ∃ (t' : ∅ u⊢ *) (t ->*_u t') (Normal t')

\func omega : ∅ u⊢ * => lam (var #0 ⋅ var #0) ⋅ lam (var #0 ⋅ var #0)

\func omegaDoesNotHalt (h : Halts omega) : Empty \elim h
  | inP (_, refl idp, n) => n (omega, (R-Beta, idp))
  | inP (t', ~> (R-App1 (R-Lam (R-App1 ())), p) r1, n)
  | inP (t', ~> (R-App1 (R-Lam (R-App2 ())), p) r1, n)
  | inP (t', ~> (R-App2 (R-Lam (R-App1 ())), p) r1, n)
  | inP (t', ~> (R-App2 (R-Lam (R-App2 ())), p) r1, n)
  | inP (t', ~> (R-Beta, idp) r1, n) => omegaDoesNotHalt (inP (t', r1, n))

\class Decider \noclassifying (P : ∅ u⊢ * -> \Prop)
  | prog : ∅ u⊢ *
  | toTrueOrFalse : \Pi (t : ∅ u⊢ *) -> prog ⋅ t ->*_u uniTrue || prog ⋅ t ->*_u uniFalse
  | decidesTrue : \Pi {t : ∅ u⊢ *} (prog ⋅ t ->*_u uniTrue) -> P t
  | decidesFalse : \Pi {t : ∅ u⊢ *} (prog ⋅ t ->*_u uniFalse) -> Not (P t)

\func haltingNotDecideable : Not (Decider Halts) => \lam (d : Decider Halts) =>
    \let
      -- reverses the decision of d, returning true when the program does not halt and omega if it halts
      -- (thus not halting)
      | isNotHalting : ∅ u⊢ * => lam $ ((subst shift d.prog ⋅ (var #0 ⋅ var #0)) ⋅ subst shift omega ⋅ uniTrue)
      -- calling this function with itself results in calling the decider
      | isNotHaltingReduction
      : isNotHalting ⋅ isNotHalting ->*_u {_} {*} (d.prog ⋅ (isNotHalting ⋅ isNotHalting)) ⋅ omega ⋅ uniTrue =>
        singleStep (R-Beta, pmap (__ ⋅ _ ⋅ _ ⋅ _) (sub-sub *> ids-id))
    \in \case d.toTrueOrFalse (isNotHalting ⋅ isNotHalting) \with {
      | byLeft a =>
        -- the decider reduces to true, so the thing must halt
        \case d.decidesTrue a \with {
          -- t' is the normal form of (isNotHalting ⋅ isNotHalting)
          | inP (t', r, n) =>
            \let
              -- but then (isNotHalting ⋅ isNotHalting) evaluates to omega
              | r' : (isNotHalting ⋅ isNotHalting) ->*_u omega =>
                isNotHalting ⋅ isNotHalting
                  ~~~< isNotHaltingReduction >~>
                d.prog ⋅ (isNotHalting ⋅ isNotHalting) ⋅ omega ⋅ uniTrue
                  ~~~< underApps (underApps a (refl idp)) (refl idp) >~>
                uniTrue ⋅ omega ⋅ uniTrue
                  ~~~< uniTrue.apply >~>
                omega `stop


              -- which with confluence means omega reduces to the value t', a contradiction
              |  r'' : omega ->*_u t' => ->*-u-confluent-normal r' r n
            \in omegaDoesNotHalt (inP (t', r'', n))
        }
      | byRight b =>
        -- in this case the decider reduces to false, so we do not halt
        \case d.decidesFalse b \with {
          | nh =>
            -- but then (isNotHalting ⋅ isNotHalting) evaluates to true, which does halt
            \let
              | r : isNotHalting ⋅ isNotHalting ->*_u uniTrue =>
                isNotHalting ⋅ isNotHalting
                  ~~~< isNotHaltingReduction >~>
                d.prog ⋅ (isNotHalting ⋅ isNotHalting) ⋅ omega ⋅ uniTrue
                  ~~~< underApps (underApps b (refl idp)) (refl idp) >~>
                uniFalse ⋅ omega ⋅ uniTrue
                  ~~~< uniFalse.apply >~>
                uniTrue `stop
            \in
              nh (inP (uniTrue, r, uniTrue.normal))
        }
    }