\import Function.Meta
\import Star
\import lambda.GeneralContext
\import lambda.unityped.Lambda
\import lambda.unityped.Reduction
\import lambda.unityped.Substitute

-- I
\func uniId {ctx : UniContext} : ctx u⊢ * => lam (var #0)
-- K
\func uniConst {ctx : UniContext} : ctx u⊢ * => lam (lam (var #1))

\func uniTrue {ctx : UniContext} : ctx u⊢ * => lam $ lam $ var #1
  \where {
    \func normal {ctx : UniContext} : Normal (uniTrue {ctx}) => \case __ \with {
      | (t', (R-Lam (R-Lam ()), p))
    }

    \func apply {ctx : UniContext} {x y : ctx u⊢ *} : uniTrue ⋅ x ⋅ y ->*_u x =>
      (R-App1 R-Beta, idp) ~> (R-Beta, idp) ~> refl subst-sub-rename-S
  }

\func uniFalse {ctx : UniContext} : ctx u⊢ * => lam $ lam $ var #0
  \where {
    \func apply {ctx : UniContext} {x y : ctx u⊢ *} : uniFalse ⋅ x ⋅ y ->*_u y =>
      (R-App1 R-Beta, idp) ~> (R-Beta, idp) ~> refl idp
  }

\func uniSequence {ctx : UniContext} : ctx u⊢ * => lam $ lam $ var #0 -- aka uniFalse