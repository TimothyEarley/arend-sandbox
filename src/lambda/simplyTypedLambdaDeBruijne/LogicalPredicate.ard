\import Function.Meta
\import Paths
\import Paths.Meta
\import Star
\import lambda.GeneralContext
\import lambda.SubstAlgebra
\import lambda.simplyTypedLambdaDeBruijne.Lambda
\import lambda.simplyTypedLambdaDeBruijne.Reduction
\import lambda.simplyTypedLambdaDeBruijne.Substitute (SimpleSubst, SimpleSubstOperaions)
\open SubstAlgebra (⋅⋅)

-- https://www.cs.uoregon.edu/research/summerschool/summer16/notes/AhmedLR.pdf

\class LogicalPredicate (underlying : \Pi {T : Type} {C : SimpleContext} (C ⊢ T) -> \Type)
  | \classifying P : \Pi (T : Type) {C : SimpleContext} (e : C ⊢ T) -> \Type
  | acceptsTerm : \Pi {T : Type} {C : SimpleContext}
                      (e : C ⊢ T)
                      (underlying e)
                      (\Pi (r : Reduction e) -> P _ (reduce r))
  -> P _ e

\func SN : LogicalPredicate Terminates \cowith
  | P => SNP
  | acceptsTerm => SNacceptsTerm
  \where {
    \func SNP (T : Type) {C : SimpleContext} (e : C ⊢ T) : \Set \elim T
      | Natural => Terminates e
      | EmptyT => Terminates e
      | A --> B => \Sigma (Terminates e) (\Pi (e' : C ⊢ A) (SNP A e') -> SNP B (e ⋅ e'))

    \func SNisTerminating {T : Type} {C : SimpleContext} {e : C ⊢ T} (h : SN T e) : Terminates e
    \elim T
      | Natural => h
      | EmptyT => h
      | A --> T => h.1

    \func SNacceptsTerm {T : Type} {C : SimpleContext} (e : C ⊢ T) (terminates : Terminates e) (h : \Pi (r : Reduction e) -> SNP T (reduce r)) : SNP T e
    \elim T, terminates
      | Natural, (_, vv, refl idp) => (e, vv, refl idp)
      | EmptyT, (_, vv, refl idp) => (e, vv, refl idp)
      | A --> T, (var l, (), _)
      | A --> T, (⋅ v1 v2, (), _)
      | A --> T, (lam b, V-lam, refl idp) => ((lam b, V-lam, refl idp),
                                              \lam e' s => {?})
      | T, (v, vv, ~> r r1) => {?}

    \func typedIsSN {T : Type} (e : ∅ ⊢ T) : SN T e =>
      \let proof => typedIsSNSubs {T} {∅} {∅} e var (\case __ \with {})
      \in rewriteF SimpleSubstOperaions.subst-ids proof
      \where {
        \func SubSatsContext {gamma delta : SimpleContext} (s : SimpleSubst gamma delta) : \Type =>
          \Pi {T : Type} (i : gamma ∋ T) -> SN T {delta} (s i)
        \where {
          \func cons {gamma delta : SimpleContext} {T : Type}
                     {e : delta ⊢ T} (h  : SN T e)
                     {s : SimpleSubst gamma delta} (hs : SubSatsContext s)
            : SubSatsContext (e ⋅⋅ s)
            => \lam {T'} => \case \elim T', \elim __ \with {
              | _, Z idp => h
              | T', S i => hs i
            }
        }

        \func forwardsSN {T : Type} {gamma : SimpleContext} {e e' : gamma ⊢ T}
                          (r : e ->1 e') (s : SN T e) : SN T e' => {?}

        \func forwardsSN* {T : Type} {gamma : SimpleContext} {e e' : gamma ⊢ T}
                          (r : e ->* e') (s : SN T e) : SN T e' => {?}

        \func backwardsSN {T : Type} {gamma : SimpleContext} (e : gamma ⊢ T)
                          (r : Reduction e) (s : SN T (reduce r)) : SN T e => {?}

        \func backwardsSN* {T : Type} {gamma : SimpleContext} {e e' : gamma ⊢ T}
                           (r : e ->* e') (s : SN T e') : SN T e => {?}

        \func typedIsSNSubs {T : Type} {gamma delta : SimpleContext}
                            (e : gamma ⊢ T)
                            (s : SimpleSubst gamma delta)
                            (sh : SubSatsContext s)
          : SN T (subst s e)
        \elim T, e
          | Natural, zero => Terminates.fromValue V-zero
          | Natural, succ e => \let e' => typedIsSNSubs e s sh \in
            (succ e'.1, V-Succ e'.2, ->*.underSucc e'.3)
          | T1, var l => \case \elim T1, \elim l \with {
            | Natural, l => sh l
            | EmptyT, l => sh l
            | A --> T1, l => sh l
          }
          | T1, ⋅ e1 e2 => rewrite SimpleSubstOperaions.substApp $ (typedIsSNSubs e1 s sh).2 (subst s e2) (typedIsSNSubs e2 s sh)
          | T1 --> T2, lam b =>
            ((_, V-lam, refl idp),
             \lam e' snE' =>
                 \let
                   | (v, vv, e'->v) => SNisTerminating snE'
                   | IH => typedIsSNSubs {T2} {gamma ∕ T1} {delta} b (v ⋅⋅ s) (SubSatsContext.cons (forwardsSN* e'->v snE') sh)
                   | goal : sub (subst (extends s) b) v = subst (v ⋅⋅ s) b => inv sub-commute
                 \in backwardsSN* {_} {_} {subst s (lam b) ⋅ e'} {subst (v ⋅⋅ s) b}
                     (->*.underApp (refl idp) e'->v V-lam ~~> (R-Beta vv, reduce.beta) ~> refl goal)
                     IH)
          \where {
            \func sub-commute {gamma delta : SimpleContext}
                              {s : SimpleSubst gamma delta}
                              {T1 T2 : Type}
                              {b : gamma ∕ T1 ⊢ T2} {v : delta ⊢ T1}
              : subst (v ⋅⋅ s) b = sub (subst (extends s) b) v =>
              {?}
          }
      }
  }