\import Data.Maybe
\import Logic.Meta
\import Meta
\import NatLike
\import Paths
\import Paths.Meta
\import Set
\import Star
\import lambda.GeneralContext
\import lambda.simplyTypedLambdaDeBruijne.Lambda
\import lambda.simplyTypedLambdaDeBruijne.examples.Examples
\import typeclasses.Monad
\import util.Maybe
\open Examples (lamID)

-- Krivine Abstract Machine
-- reductions to head normal form

-- https://bentnib.org/posts/2020-08-13-non-idempotent-intersection-types.html#11952

\data Env (n : Nat) : \1-Type (\suc \lp) \elim n
  | 0 => nil
  | suc n => cons (Env n) Closure

\data Closure : \1-Type (\suc \lp)
  | clo (ctx : SimpleContext) (T : Type) (Env (Context.length ctx)) (ctx ⊢ T)

\data Stack
  | emp
  | \infixl 6 # Closure Stack

\record Configuration
  | closure : Closure
  | stack : Stack

-- TODO add reduction for succ x
\data Reduction (c : Configuration) : \Prop \elim c
  | (clo (∕ ctx c) T env (var (Z p)), st) => grab
  | (clo (∕ ctx c) T env (var (S p)), st) => skip
  | (clo ctx T env (⋅ f arg), st) => push
  | (clo ctx (--> A B) env (lam body), # c st) => pop
  \where {
    \func pick (c : Configuration) : Dec (Reduction c)
    \elim c
      | (clo ctx (--> A B) e (lam body), emp) => no (\lam r => \case r)
      | (clo ctx (--> A B) e (lam body), # c s) => yes pop
      | (clo ctx T e (⋅ f arg), s) => yes push

      | (clo (∕ ctx c) T e (var (Z p)),s) => yes grab
      | (clo (∕ ctx c) T e (var (S l)),s) => yes skip
      | (clo ∅ T e (var ()),s)

      | (clo ∅ (Base B) e (base b),s) => no (\lam r => \case r)
      | (clo (∕ c1 t) (Base B) e (base b),s) => no (\lam r => \case r)
  }

\func reduce {c : Configuration} (r : Reduction c) : Configuration
\elim c, r
  | (clo (∕ ctx c) T (cons env cl) (var (Z p)),st), grab => \new Configuration {
    | closure => cl
    | stack => st
  }
  | (clo (∕ ctx c) T (cons env cl) (var (S l)), st), r => \new Configuration {
    | closure => clo ctx T env (var l)
    | stack => st
  }
  | (clo ctx T env (⋅ {T'} f arg), st), push => \new Configuration {
    | closure => clo ctx (T' --> T) env f
    | stack => clo ctx T' env arg # st
  }
  | (clo ctx (--> A B) env (lam body), # c st), pop => \new Configuration {
    | closure => clo (ctx ∕ A) B (cons env c) body
    | stack => st
  }

\func initial {T : Type} (t : ∅ ⊢ T) : Configuration \cowith
  | closure => clo ∅ T nil t
  | stack => emp


\func stepKAM \alias \infixl 6 ->1_KAM (c c' : Configuration) => \Sigma (r : Reduction c) (c' = reduce r)
\where {
  \func auto (c : Configuration) : Maybe Configuration
    => \case Reduction.pick c \with {
      | yes r => just (reduce r)
      | no n => nothing
    }
  \func autoCorrect {c c' : Configuration} (p : auto c = just c') : c ->1_KAM c'
    => cases (Reduction.pick c arg addPath) \with {
      | yes e, q => \let f => dejust (rewriteF q (unfold auto p)) \in (e, inv f)
      | no n, q => \let f => rewriteF q (unfold auto p) \in contradiction
    }
}

\func stepsKAM \alias \infixl 6 ->*_KAM (c c' : Configuration) =>
  Star (->1_KAM) c c' -- the number of steps is left implicit
\where {

  \func run (fuel : Nat) (c : Configuration) : Maybe Configuration \elim fuel
    | 0 => just c
    | suc fuel => ->1_KAM.auto c >>= run fuel

  \func run_correct (fuel : Nat) {c c' : Configuration} (p : run fuel c = just c') : c ->*_KAM c'
    \elim fuel
      | 0 => refl (dejust p)
      | suc fuel => cases (->1_KAM.auto c arg addPath) \with {
        | just a, q => \let p' => rewriteF q p \in ->1_KAM.autoCorrect q ~> run_correct fuel p'
        | nothing, q => \let p' => rewriteF q p \in contradiction
      }

  \open Examples

  \func example : initial (lamID ⋅ base 1) ->*_KAM initial (base 1)
      => (push, idp) ~> (pop, idp) ~> (grab, idp) ~> refl idp

  \func example' : initial (lamID ⋅ base 1) ->*_KAM initial (base 1)
    => ->1_KAM.autoCorrect idp ~> ->1_KAM.autoCorrect idp ~> ->1_KAM.autoCorrect idp ~> refl idp

  \func example'' : initial (lamID ⋅ base 1) ->*_KAM initial (base 1)
    => run_correct 3 (unfold idp)
  }

