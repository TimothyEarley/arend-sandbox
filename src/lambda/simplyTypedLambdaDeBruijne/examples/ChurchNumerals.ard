\import lambda.GeneralContext
\import lambda.simplyTypedLambdaDeBruijne.Lambda

\module Church \where {
  \func ChurchNat (N : Type) : Type => (N --> N) --> N --> N

  \func c_zero {gamma : SimpleContext} {N : Type} : gamma ⊢ ChurchNat N => lam (lam (var #0))

  \func c_succ {gamma : SimpleContext} {N : Type} : gamma ⊢ ChurchNat N --> ChurchNat N =>
    lam (lam (lam (var #1 ⋅ (var #2 ⋅ var #1 ⋅ var #0))))

  \func one {gamma : SimpleContext} {N : Type} : gamma ⊢ ChurchNat N => lam (lam (var #1 ⋅ var #0))

  \func two {gamma : SimpleContext} {N : Type} : gamma ⊢ ChurchNat N => lam (lam (var #1 ⋅ (var #1 ⋅ var #0)))

  \func plus {gamma : SimpleContext} {N : Type} : gamma ⊢ ChurchNat N --> ChurchNat N --> ChurchNat N =>
    lam (lam (lam (lam (var #3 ⋅ var #1 ⋅ (var #2 ⋅ var #1 ⋅ var #0)))))


  \func churchFromNat {gamma : SimpleContext} {N : Type} (n : Nat) : gamma ⊢ ChurchNat N \elim n
    | 0 => c_zero
    | suc n => c_succ ⋅ churchFromNat n
}