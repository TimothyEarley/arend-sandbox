\import Logic
\import Logic.Meta
\import lambda.GeneralContext
\import lambda.simplyTypedLambdaDeBruijne.Lambda

\func realiseType (T : Type) : \Set
  | Base B => B
  | --> A B => (realiseType A) -> (realiseType B)

\func RealisedContext (c : SimpleContext) => \Pi {A : Type} (c ∋ A) -> realiseType A
\where {
  \func empty : RealisedContext ∅
    => \lam {A} l => \case l

  \func extend {c : SimpleContext} (env : RealisedContext c) {A : Type} (r : realiseType A) {B : Type} (h : c ∕ A ∋ B) : realiseType B
    \elim h
      | Z idp => r
      | S h => env h
}

\func realiseCtx {gamma : SimpleContext} {A : Type} (env : RealisedContext gamma) (t : gamma ⊢ A) : realiseType A
  \elim A, t
    | T, var l => env l
    | --> A B, lam t => \lam r => realiseCtx (RealisedContext.extend env r) t
    | B, ⋅ t1 t2 => (realiseCtx env t1) (realiseCtx env t2)
    | Base B, base b => b

\func realise {A : Type} (t : ∅ ⊢ A) : realiseType A
  => realiseCtx {∅} RealisedContext.empty t

\func cannotTypeEmpty : Not (∃ (∅ ⊢ Base Empty))
  => \case __ \with {
    | inP a => realise a
  }