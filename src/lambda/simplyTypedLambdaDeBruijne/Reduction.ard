\import Data.Or
\import Logic
\import Meta
\import Paths
\import Paths.Meta
\import Set \hiding (#)
\import Star
\import lambda.GeneralContext
\import lambda.simplyTypedLambdaDeBruijne.Lambda
\import lambda.simplyTypedLambdaDeBruijne.Substitute (SimpleSubst, SimpleSubstOperations)
\open lambda.simplyTypedLambdaDeBruijne.Substitute.rename (renameApp)

\data Value {gamma : SimpleContext} {A : Type} (t : gamma ⊢ A) : \Prop \elim A, t
  | Base B, base b => V-base
  | --> A B, lam t => V-lam
  \where {
    \func isValue {gamma : SimpleContext} {A : Type} (t : gamma ⊢ A) : Dec (Value t)
    \elim A, t
      | T, var l => no (\lam v => \case v)
      | --> A B, lam t => yes V-lam
      | B, ⋅ t1 t2 => no (\lam v => \case v)
      | Base B, base b => yes V-base

    \func afterRename {gamma delta : SimpleContext} {A : Type} {t : gamma ⊢ A} (h : Value t)
                      {r : Rename gamma delta}
      : Value (rename r t)
    \elim A, t, h
      | --> A A1, lam t, V-lam => V-lam
      | Base B, base b, V-base => {?}

    \func afterSubst {gamma delta : SimpleContext} {A : Type} {t : gamma ⊢ A} (h : Value t)
                     (s : SimpleSubst gamma delta)
      : Value (subst s t)
    \elim A, t, h
      | --> A A1, lam t, V-lam => V-lam
      | Base B, base b, V-base => V-base
  }

\data Reduction {gamma : SimpleContext} {A : Type} (t : gamma ⊢ A)
\elim t
  | ⋅ f arg => R-App1 (Reduction f)
  | ⋅ f arg => R-App2 (Reduction arg) (Value f)
  | ⋅ (lam body) arg => R-Beta (Value arg)

  \where {
    \func valueNoReduction {gamma : SimpleContext} {A : Type} {t : gamma ⊢ A} (v : Value t) : Not (Reduction t)
    \elim A, t, v
      | --> A B, lam t, V-lam => \lam r => \case r
      | Base B, base b, V-base => \lam r => \case r

    \func deterministic {gamma : SimpleContext} {A : Type} {t : gamma ⊢ A} (r r' : Reduction t) : r = r'
    \elim A, t, r, r'
      | --> A A', ⋅ (lam body) arg, R-Beta v, R-Beta v1 => pmap R-Beta ext
      | Base B, ⋅ (lam body) arg, R-Beta v, R-Beta v1 => pmap R-Beta ext

      | A, ⋅ f arg, R-App1 r, R-App1 r' => pmap R-App1 (deterministic r r')
      | A, ⋅ f arg, R-App2 r v, R-App2 r' v1 => pmap2 R-App2 (deterministic r r') ext

      | A, ⋅ f arg, R-App2 r v, R-App1 r' => absurd (valueNoReduction v r')
      | A, ⋅ (lam body) arg, R-Beta v, R-App2 r' v1 => absurd (valueNoReduction v r')
      | A, ⋅ f arg, R-App1 r, R-App2 r' v => absurd (valueNoReduction v r)
      | A, ⋅ (lam body) arg, R-App2 r v, R-Beta v1 => absurd (valueNoReduction v1 r)

      | A, ⋅ (lam body) arg, R-App1 (), _
      | A, ⋅ (lam body) arg, R-Beta v, R-App1 ()

    \func decide {A : Type} (t : ∅ ⊢ A) : Or (Reduction t) (Value t)
    \elim A, t
      | T, var ()
      | --> A B, lam t => inr V-lam
      | B, ⋅ t1 t2 => \case decide t1, decide t2 \with {
        | inl a, _ => inl (R-App1 a)
        | inr b, inl a => inl (R-App2 a b)
        | inr b, inr b1 => \case \elim t1, b \with {
          | lam t, V-lam => inl (R-Beta b1)
        }
      }
      | Base B, base b => inr V-base

    \func appCanReduce{T T' : Type} {f : ∅ ⊢ T --> T'} {arg : ∅ ⊢ T} : Reduction (f ⋅ arg) =>
    \case decide f, decide arg \with {
      | inl a, _ => R-App1 a
      | inr b, inl a => R-App2 a b
      | inr b, inr b1 => \case \elim f, b \with {
        | lam t, V-lam => R-Beta b1
      }
    }
  }

\func reduce {gamma : SimpleContext} {A : Type} {t : gamma ⊢ A} (r : Reduction t) : gamma ⊢ A
\elim A, t, r
  | --> _ _, ⋅ {T} (lam body) arg, R-Beta _ => sub body arg
  | Base _, ⋅ {T} (lam body) arg, R-Beta _ => sub body arg
  | _, ⋅ f arg, R-App1 r => reduce r ⋅ arg
  | _, ⋅ f arg, R-App2 r v => f ⋅ reduce r
  \where {
    \func app1 {c : SimpleContext} {T T' : Type} {f : c ⊢ T --> T'} {arg : c ⊢ T}
               {r : Reduction f} : reduce (R-App1 {_} {_} {_} {_} {arg} r) = reduce r ⋅ arg
    \elim T', f
      | --> A T', lam f => idp
      | --> T' T'1, ⋅ f1 f2 => idp
      | Base B, lam f => idp
      | Base B, ⋅ f1 f2 => idp

    \func app2 {c : SimpleContext} {T T' : Type} {f : c ⊢ T --> T'} {vf : Value f} {arg : c ⊢ T}
               {r : Reduction arg} : reduce (R-App2 r vf) = f ⋅ reduce r
    \elim T', f
      | --> A B, lam f => idp
      | Base B, lam f => idp

    \func beta {c : SimpleContext} {T T' : Type}
               {body : c ∕ T ⊢ T'} {arg : c ⊢ T} {v : Value arg}
      : reduce (R-Beta {_} {_} {_} {body} v) = {c ⊢ T'} sub body arg
      \elim T'
        | --> A T' => idp
        | Base B => idp
  }

\func ReducesStep \alias \infix 5 ->1 {gamma : SimpleContext} {A : Type} (t t' : gamma ⊢ A) =>
  \Sigma (r : Reduction t) (reduce r = t')
  \where {
    \func underRename {gamma delta : SimpleContext} {A : Type} (r : Rename gamma delta)
                      {t t' : gamma ⊢ A} (st : t ->1 t') : rename r t ->1 rename r t'
    \elim A, t, st
      | A, var l, ((),p)
      | --> A A1, lam t, ((),p)
      | A, ⋅ (lam body) arg, (R-Beta v, idp) =>
        rewrite renameApp
            (R-Beta (Value.afterRename v),
             rewrite (reduce.beta, reduce.beta) (underRename-sub r))
      | A, ⋅ f t2, (R-App1 st,p) =>
        \let (next, nextP) => underRename r (st, idp)
             | p' => rewriteF reduce.app1 p
        \in rewrite renameApp (R-App1 next, reduce.app1 *> pmap (__ ⋅ _) nextP *> inv renameApp *> pmap (rename r) p')
      | A, ⋅ f t2, (R-App2 st v,p) =>
        \let (next, nextP) => underRename r (st, idp)
             | p' => rewriteF reduce.app2 p
        \in rewrite renameApp (R-App2 next (Value.afterRename v),
                               reduce.app2 *> pmap (_ ⋅ __) nextP *> inv renameApp *> pmap (rename r) p')
      | Base B, base b, ((),p)
      \where {
        \func underRename-sub
          {gamma delta : SimpleContext} (r : Rename gamma delta)
          {A B : Type} {body : gamma ∕ A ⊢ B} {arg : gamma ⊢ A}
          : sub (rename (extend r) body) (rename r arg) = rename r (sub body arg)
        => {?}
      }

    \func fromRename {gamma delta : SimpleContext} {A : Type} {re : Rename gamma delta}
                     {t : gamma ⊢ A} {t' : delta ⊢ A}
      (st : rename re t ->1 t') : \Sigma (t'' : gamma ⊢ A) (t ->1 t'') (rename re t'' = t') \elim A, t, st
      | --> A A1, var l, ((), p)
      | Base B, var l, ((),p)
      | --> A A1, lam t, ((),p)
      | A, ⋅ t1 t2, (r,p) => \let r' => rewrite renameApp r \in {?}
      | Base B, base b, ((),p)
  }

\func idpStep {gamma : SimpleContext} {A : Type} {t : gamma ⊢ A} {r : Reduction t} : t ->1 reduce r => (r, idp)

\func Reduces \alias \infix 5 ->* {gamma : SimpleContext} {A : Type} (t t' : gamma ⊢ A) => Star (->1) t t'
  \where {
    \func under
      {gamma : SimpleContext} {T : Type}
      {f : \Pi (gamma ⊢ T) -> gamma ⊢ T}
      (u : \Pi {t t' : gamma ⊢ T} (t ->1 t') -> f t ->1 f t')
      {t t' : gamma ⊢ T} (h : t ->* t') : f t ->* f t'
    \elim h
      | refl p => refl (pmap f p)
      | ~> r s => u r ~> under {_} {_} {f} u s

    \func underApp {gamma : SimpleContext}
                   {A B : Type} {f f' : gamma ⊢ A --> B}
                   {arg arg' : gamma ⊢ A}
                   (fh : f ->* f')
                   (argh : arg ->* arg')
                   (vf' : Value f')
      : f ⋅ arg ->* f' ⋅ arg'
      \elim fh, argh
        | refl idp, refl idp => refl idp
        | refl idp, ~> r argh => (R-App2 r.1 vf', reduce.app2 *> pmap _ r.2) ~> underApp (refl idp) argh vf'
        | ~> r s, argh => (R-App1 r.1, reduce.app1 *> pmap _ r.2) ~> underApp s argh vf'
  }

\func eval (fuel : Nat) {A : Type} (t : ∅ ⊢ A) : ∅ ⊢ A
\elim fuel
  | 0 => t
  | suc fuel => \case Reduction.decide t \with {
    | inl a => eval fuel (reduce a)
    | inr b => t
  }
  \where {
    \func correct {fuel : Nat} {A : Type} {t : ∅ ⊢ A} : t ->* eval fuel t
    \elim fuel
      | 0 => refl idp
      | suc fuel => mcases \with {
        | inl a => idpStep ~> correct
        | inr b => refl idp
      }
  }


-- Normal, but not value, is stuck
-- this should not happen in a typed setting

\func Normal {c : SimpleContext} {T : Type} (t : c ⊢ T) : \Prop => Not (Reduction t)
  \where {
    \func fromValue {c : SimpleContext} {T : Type} {t : c ⊢ T} (v : Value t) : Normal t
    \elim T, t, v
      | --> A B, lam t, V-lam => \lam r => \case r
      | Base B, base b, V-base => \lam r => \case r
  }

\func Stuck {c : SimpleContext} {T : Type} (t : c ⊢ T) => \Sigma (Normal t) (Not (Value t))

\func progress {A : Type} (t : ∅ ⊢ A) : Or (Value t) (\Sigma (t' : ∅ ⊢ A) (t ->1 t')) =>
\case Reduction.decide t \with {
  | inl a => inr (reduce a, idpStep)
  | inr b => inl b
}

\func Terminates {A : Type} {C : SimpleContext} (t : C ⊢ A) : \1-Type
  => \Sigma  (v : C ⊢ A) (Value v) (t ->* v)
\where {
  \func fromValue {C : SimpleContext} {T : Type} {t : C ⊢ T} (v : Value t) : Terminates t
    => (t, v, refl idp)
}