\import Function.Meta
\import Paths
\import Paths.Meta
\import lambda.GeneralContext

-- https://plfa.github.io/Substitution/#plfa_plfa-part2-Substitution-3139

\class SubstAlgebra \extends SubstOperations {
  | subst-var {gamma delta : Context Type} (s : Subst  {_} {Term} gamma delta) {T : Type} (l : gamma ∋ T)
  : subst s (s-var l) = s l

-- Problem  with levels?
--  | subst-ids {gamma : Context Type} {T : Type} {t : Term gamma T} : subst s-var t = t

  \func ids {gamma : Context Type} : Subst {_} {Term} gamma gamma => s-var

  \func shift \alias ∆ {gamma : Context Type} {A : Type} : Subst {_} {Term} gamma (gamma ∕ A) => \lam i => s-var (S i)

  \func cons \alias \infix 6 ⋅⋅ {gamma delta : Context Type} {A : Type}
                                (t :  Term delta A) (s : Subst {_} {Term} gamma delta) : Subst (gamma ∕ A) delta =>
    \lam {A1} l => \case l \with {
      | Z p => rewriteI p t
      | S l1 => s l1
    }

  \func seq \alias \infix 6 ⊳ {gamma delta epsilon : Context Type}
                              (s : Subst {_} {Term}  gamma delta) (s' : Subst {_} {Term}  delta epsilon)
    : Subst {_} {Term} gamma epsilon => \lam i => subst s' (s i)

  \func sub-head {C D : Context Type} {T : Type} {t : Term D T}
                 {s : Subst {_} {Term} C D}
    : subst (t ⋅⋅ s) (s-var $ Z idp) = t => subst-var (t ⋅⋅ s) (Z idp)

  \func sub-tail {C D : Context Type} {T : Type} {t : Term D T}
                 {s : Subst {_} {Term} C D}
    : ∆ ⊳ (t ⋅⋅ s) = s => ext (\lam {A} l => subst-var _ _)

  \func sub-eta {C D : Context Type} {T : Type}
                {s : Subst {_} {Term} (C ∕ T) D}
    : subst s (s-var (Z idp)) ⋅⋅ (∆ ⊳ s) = s => ext (\lam {A} l => \case \elim A, \elim l \with {
    | _, Z idp => subst-var _ _
    | _, S l => subst-var _ _
  })

  \func Z-shift {gamma : Context Type} {T : Type}
    : s-var (Z idp) ⋅⋅ ∆ = ids {\this} {gamma ∕ T} => ext (\lam {A} l => \case \elim A, \elim l \with {
    | _, Z idp => idp
    | _, S l => idp
  })

--  (sub-id)    ⟪ ids ⟫ M      ≡ M
--  (sub-app)   ⟪ σ ⟫ (L · M)  ≡ (⟪ σ ⟫ L) · (⟪ σ ⟫ M)
--  (sub-abs)   ⟪ σ ⟫ (ƛ N)    ≡ ƛ ⟪ σ ⟫ N
--  (sub-sub)   ⟪ τ ⟫ ⟪ σ ⟫ M  ≡ ⟪ σ ⨟ τ ⟫ M
--
--  (sub-idL)   ids ⨟ σ        ≡ σ
--  (sub-idR)   σ ⨟ ids        ≡ σ
--  (sub-assoc) (σ ⨟ τ) ⨟ θ    ≡ σ ⨟ (τ ⨟ θ)
--  (sub-dist)  (M • σ) ⨟ τ    ≡ (⟪ τ ⟫ M) • (σ ⨟ τ)
}