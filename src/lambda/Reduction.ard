\import Data.Or
\import Identifier
\import Logic
\import Logic.Meta
\import Meta
\import Paths
\import Paths.Meta
\import Set
\import Star
\import identity.Identity
\import identity.NatIdentity
\import lambda.Lambda
\import lambda.Normalizable
-- TODO name the strategy


\data Reduction (t : LambdaTerm)
\elim t
  | ⋅ (Lam v body) arg => Beta
  | ⋅ f arg => App1 (Reduction f)
  | ⋅ f arg => App2 (Reduction arg)
  | Lam v body => InLam (Reduction body) -- aka ζ Zeta

\func reduce {t : LambdaTerm} (r : Reduction t) : LambdaTerm
\elim t, r
  | ⋅ (Lam v body) arg, Beta => subs body v arg
  | ⋅ f arg, App1 r => reduce r ⋅ arg
  | ⋅ f arg, App2 r => f ⋅ reduce r
  | Lam v body, InLam r => Lam v (reduce r)

  \where {
    \func app1 {t' t : LambdaTerm} {r : Reduction t} : reduce {t ⋅ t'} (App1 r) = reduce r ⋅ t' \elim t
      | Var i => idp | Lam v body => idp | ⋅ f arg => idp

    \func app2 {t' t : LambdaTerm} {r : Reduction t'} : reduce {t ⋅ t'} (App2 r) = t ⋅ reduce r \elim t
      | Var i => idp | Lam v body => idp | ⋅ f arg => idp
  }

\func subs (in : LambdaTerm) (at : Identifier) (with : LambdaTerm) : LambdaTerm
\elim in
  | Var i => \case at nat≟ i \with {
    | yes e => with
    | no n => Var i
  }
  | Lam v body => \case at nat≟ v \with {
    | yes e => Lam v body
    | no n => Lam v (subs body at with)
  }
  | ⋅ f arg => subs f at with ⋅ subs arg at with

\where {
  \func commuteEqual {v : Identifier} {s s' t : LambdaTerm} : subs s v (subs s' v t) = subs (subs s v s') v t
    \elim s
      | Var i => mcases \with {
        | yes e => idp
        | no n => mcases \with {
          | yes e => contradiction
          | no n1 => idp
        }
      }
      | Lam v1 body => mcases \with {
        | yes e => mcases \with {
          | yes e1 => idp
          | no n => contradiction
        }
        | no n => mcases \with {
          | yes e => contradiction
          | no n1 => pmap (Lam v1) commuteEqual
        }
      }
      | ⋅ f arg => pmap2 (⋅) commuteEqual commuteEqual
}

\func ReducesStep \alias \infix 5 ->1 (t t' : LambdaTerm) => \Sigma (r : Reduction t) (reduce r = t')
  \where {
    \func valueNoReduction {t t' : LambdaTerm} (v : Value t) (st : t ->1 t') : Empty \elim t, v, st
      | Var i, v, ((), _)
      | Lam v body, v1, (InLam r, _) => valueNoReduction v1 (r, idp)
  }

\func Reduces \alias \infix 5 ->* (t t' : LambdaTerm) => Star (->1) t t'
\where {
  \func appHelper {s s' t t' : LambdaTerm} (sh : s ->* s') (th : t ->* t') : (s ⋅ t) ->* (s' ⋅ t')
  \elim sh, th
    | refl idp, refl idp => refl idp
    | refl idp, ~> {t''} r st => (App2 r.1, reduce.app2 *> pmap (s ⋅ __) r.2) ~> appHelper (refl idp) st
    | ~> r s1, th => (App1 r.1, reduce.app1 *> pmap (__ ⋅ t) r.2) ~> appHelper s1 th

  \func lamHelper {v : Identifier} {t t' : LambdaTerm} (h : t ->* t') : Lam v t ->* Lam v t'
    \elim h
      | refl idp => refl idp
      | ~> r s => (InLam r.1, pmap (Lam v) r.2) ~> lamHelper s
}

\func canReduce (t : LambdaTerm) : Or (Reduction t) (Normal t)
\elim t
  | Var i => inr Normal.varNormal
  | Lam v body => \case canReduce body \with {
    | inl a => inl (InLam a)
    | inr b => inr (\lam _x => \case _x \with {
      | (_, (InLam r, _)) => b (reduce r, (r, idp))
    })
  }
  | ⋅ (Lam v body) arg => inl Beta
  | ⋅ (Var i) arg => \case canReduce arg \with {
    | inl r => inl (App2 r)
    | inr b => inr (\lam _x => \case \elim _x \with {
      | (t', (App1 r, p)) => Normal.varNormal {i} (_, (r, idp))
      | (t', (App2 r, p)) => b (reduce r, (r, idp))
    })
  }
  | ⋅ (⋅ f arg1) arg => \case canReduce (⋅ f arg1), canReduce arg \with {
    | _, inl a => inl (App2 a)
    | inl a, _ => inl (App1 a)
    | inr b, inr b1 => inr (\lam _x => \case \elim _x \with {
      | (t', (App1 r, p)) => b (_, (r, idp))
      | (t', (App2 r, p)) => b1 (_, (r, idp))
    })
  }
