\import Data.Or
\import Identifier
\import Logic
\import Logic.Meta
\import Meta
\import Paths
\import Paths.Meta
\import Set
\import lambda.Lambda
\import lambda.Normalizable
\import lambda.Reduction
\import lambda.SimplyTyped
\import util.Maybe
\open Typerule (contextInvariance)

\func preservation {t t' : LambdaTerm} {T : Type} {ctx : Context} (h : ctx ⊢ (t, T))
                   (st : t ->1 t') : ctx ⊢ (t', T)
\elim t, h, st
  | Var v, TVar p, st => absurd (Normal.varNormal (t', st))
  | Lam v body, TAbs idp h, (InLam r, idp) => TAbs idp (preservation h (r, idp)) -- TODO needs added context
  | ⋅ f arg, TApp fType argType, (App1 r, idp) => rewrite reduce.app1 (TApp (preservation fType (r, idp)) argType)
  | ⋅ f arg, TApp fType argType, (App2 r, idp) => rewrite reduce.app2 (TApp fType (preservation argType (r, idp)))
  | ⋅ (Lam v body) arg, TApp {T1} (TAbs {A} {B} p bodyType) argType, (Beta, idp) =>
    \let A=T1 => pmap Type.-->Left p
         | B=T => pmap Type.-->Right p
    \in subsPreservation (rewriteF A=T1 (rewriteF B=T bodyType)) argType

  \where {
    \func subsPreservation {gamma : Context} {T S : Type} {t s : LambdaTerm} {x : Identifier}
                           (tType : Context.add gamma x S ⊢ (t, T)) (sType : gamma ⊢ (s, S)) : gamma ⊢ (subs t x s, T)
    \elim t, tType
      | Var v, TVar p => mcases \with {
        | yes e => \let S=T => dejust (rewriteF (Context.addGet {gamma}) (rewriteF e p))
                   \in rewriteI S=T (Typerule.contextInvariance sType (\lam x1 f => idp))
        | no n => \let p' => rewriteF (Context.addGetOther {gamma} n) p \in TVar p'
      }

      | Lam v body, TAbs {T1} {T2} p bodyType => mcases \with {
        | yes e => TAbs p (rewriteF (Context.addDuplicate {gamma} e) bodyType)
        | no n => \let swapped : Typerule (Context.add (Context.add gamma v T1) x S) body T2 =>
          rewriteF (Context.swap {gamma} n) bodyType
                  \in TAbs p (subsPreservation swapped (contextInvariance sType (\lam x1 f => mcases \with {
            | yes p1 => {?}
            | no n1 => idp
          })))
      }

      | ⋅ f arg, TApp fType argType => TApp (subsPreservation fType sType) (subsPreservation argType sType)
  }