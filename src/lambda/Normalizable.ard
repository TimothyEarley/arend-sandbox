\import Data.Or
\import Identifier
\import Logic
\import Logic.Meta
\import LogicUtil
\import Paths
\import Star
\import lambda.Lambda
\import lambda.Preservation
\import lambda.Reduction
\import lambda.SimplyTyped
\open Context

\func Normal (t : LambdaTerm) : \Prop => Not (\Sigma (t' : LambdaTerm) (t ->1 t'))
  \where {
    \func fromValue {t : LambdaTerm} (val : Value t) : Normal t \elim t, val
      | Lam v body, val => \lam _x => \case _x \with {
        | (t', (InLam r, idp)) => fromValue val (_, (r, idp))
      }

    \func notFromReduction {t : LambdaTerm} (r : Reduction t) : Not (Normal t) => \lam n => n (_, (r, idp))

    \func varNormal {i : Identifier} : Normal (Var i) => \lam _x => \case _x \with {
      | (_, ((), _))
    }

    \func isNormal? (t : LambdaTerm) : Or (Normal t) (Not (Normal t)) => \case canReduce t \with {
      | inl a => inr (notFromReduction a)
      | inr b => inl b
    } \where {}

    \func notNormalHasReduction {t : LambdaTerm} (h : Not (Normal t)) : Reduction t => \case canReduce t \with {
      | inl a => a
      | inr b => contradiction
    }
    -- normals that are not values are stuck (e.g. "Var 0 ⋅ Var 0")
  }

\func WeakNormalizable (t : LambdaTerm) => \Sigma (v : LambdaTerm) (Normal v) (t ->* v)
  \where {
    \func prefix {t t' : LambdaTerm} (st : t ->1 t') (w : WeakNormalizable t') : WeakNormalizable t
    \elim w
      | (v, nv, r) => (v, nv, st ~> r)
  }

\data StrongNormalizable (t : LambdaTerm)
  | alreadyNormal (Normal t)
  | allReductionsNormalize (Not (Normal t)) (\Pi (r : Reduction t) -> StrongNormalizable (reduce r))
  \where {
    \func postfix {t t' : LambdaTerm} (st : t ->1 t') (s : StrongNormalizable t) : StrongNormalizable t' \elim st, s
      | st, alreadyNormal n => absurd (n (t', st))
      | (r, idp), allReductionsNormalize _ f => f r

    \func toWeak {t : LambdaTerm} (n : StrongNormalizable t) : WeakNormalizable t
    \elim n
      | alreadyNormal n => (t, n, refl idp)
      | allReductionsNormalize nn x => \let r => Normal.notNormalHasReduction nn | w => toWeak {reduce r} (x r)
                                       \in WeakNormalizable.prefix (r, idp) w
  }

\func omega : LambdaTerm => Lam 0 (Var 0 ⋅ Var 0) ⋅ Lam 0 (Var 0 ⋅ Var 0)
  \where {
    \func omega-not-normal (n : Normal omega) : Empty => n (omega, (Beta, idp))

    \func omega-not-weak-norm (w : WeakNormalizable omega) : Empty
      | (v, nv, refl idp) => omega-not-normal nv
      | ((v,nv, ~> ((Beta, idp)) s)) => omega-not-weak-norm (v, nv, s)
      | ((v,nv,~> ((App1 (InLam (App1 ())),p)) s))
      | ((v,nv,~> ((App1 (InLam (App2 ())),p)) s))
      | ((v,nv,~> ((App2 (InLam (App1 ())),p)) s))
      | ((v,nv,~> ((App2 (InLam (App2 ())),p)) s))

    \func omega-not-strong-norm (s : StrongNormalizable omega) : Empty
    \elim s
      | alreadyNormal n => omega-not-normal n
      | allReductionsNormalize _ f => omega-not-strong-norm (f Beta)
  }

\func simplyTypedNormalizable {t : LambdaTerm} {T : Type}
                              (h : emptyContext ⊢ (t, T)) : StrongNormalizable t => {?}

  \where {
    \func R (T : Type) (t : LambdaTerm) : \Set
    \elim T
      | --> A B => \Sigma (emptyContext ⊢ (t, A --> B)) (StrongNormalizable t) (\Pi (s : LambdaTerm) -> R A s -> R B (t ⋅ s))

    \func rHalts {T : Type} {t : LambdaTerm} (r : R T t) : StrongNormalizable t
    \elim T, r
      | --> A B, r => r.2

    \func rTyped {T : Type} {t : LambdaTerm} (r : R T t) : emptyContext ⊢ (t, T)
    \elim T, r
      | --> A B, r => r.1

    \func RStep {T : Type} {t t' : LambdaTerm} (h : emptyContext ⊢ (t, T)) (st : t ->1 t') : R T t <--> R T t'
    \elim T
      | --> T1 T2 => (\lam r => \case \elim r \with {
        | (tTyped, sn, rr) => (preservation h st,
                               StrongNormalizable.postfix st sn,
                               \lam s r => \let sTyped : emptyContext ⊢ (s, T1) => rTyped r
                                                | r' : R T2 (t ⋅ s) => rr s r
                                                | tsTyped : emptyContext ⊢ (t ⋅ s, T2) => rTyped r'
                                                | st' : t ⋅ s ->1 t' ⋅ s => (App1 st.1, reduce.app1 *> pmap (__ ⋅ s) st.2)
                                                | ind => RStep tsTyped st'
                                           \in ind.1 r')
      },
                      \lam r => \case \elim r \with {
                        | (t'Typed, sn, rr) =>
                          (h,
                           {?},
                           \lam s r => \let sTyped : emptyContext ⊢ (s, T1) => rTyped r
                                            | r' : R T2 (t' ⋅ s) => rr s r
                                            | tsTyped : emptyContext ⊢ (t ⋅ s, T2) => TApp h sTyped
                                            | st' : t ⋅ s ->1 t' ⋅ s => (App1 st.1, reduce.app1 *> pmap (__ ⋅ s) st.2)
                                            | ind => RStep tsTyped st'
                                       \in ind.2 r')
                      })
  }