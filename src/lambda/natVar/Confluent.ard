\import Identifier
\import Logic
\import Paths.Meta
\import Star
\import lambda.natVar.Lambda
\import lambda.natVar.Normalizable
\import lambda.natVar.Reduction

-- https://www21.in.tum.de/teaching/logik/SS12/lambda-en.pdf

-- https://plfa.inf.ed.ac.uk/Confluence/
{-
Parallel and nested reduction
-}

\data ParReduction \alias \infix 5 > (t result : LambdaTerm) \elim t
  | Var i => P-Var (Var i = result)
  | Lam x t => P-Lam {t' : LambdaTerm} (t > t') (result = Lam x t')
  | ⋅ s t => P-App {s' t' : LambdaTerm} (s > s') (t > t') (result = s' ⋅ t')
  | ⋅ (Lam x s) t => P-Subs {s' t' : LambdaTerm} (s > s') (t > t') (result = subs s' x t')

  \where {
    \func refl {t : LambdaTerm} : t > t
      | {Var i} => P-Var idp
      | {Lam v body} => P-Lam refl idp
      | {⋅ f arg} => P-App refl refl idp

    \func lam {v : Identifier} {body t : LambdaTerm}
              (h : Lam v body > t) : \Sigma (body' : LambdaTerm) (t = Lam v body') (body > body')
    \elim h
      | P-Lam {body'} h idp => (body', idp, h)

    \func subsHelper {s s' t t' : LambdaTerm} (hs : s > s') (ht : t > t') {x : Identifier} : subs s x t > subs s' x t' =>
      {?}
  }

\func \infix 5 >* (t t' : LambdaTerm) => Star (>) t t'

\func ->1To> {t t' : LambdaTerm} (h : t ->1 t') : t > t'
\elim t, h
  | Var i, ((), _)
  | Lam v body, (InLam r, idp) => P-Lam (->1To> (r, idp)) idp
  | ⋅ f arg, (App1 r, idp) => rewrite reduce.app1 (P-App (->1To> (r, idp)) >.refl idp)
  | ⋅ f arg, (App2 r, idp) => rewrite reduce.app2 (P-App >.refl (->1To> (r, idp)) idp)
  | ⋅ (Lam v body) arg, (Beta, idp) => P-Subs >.refl >.refl idp

\func ->*To>* {t t' : LambdaTerm} (h : t ->* t') : t >* t'
  \elim h
    | refl idp => refl idp
    | ~> r s => ->1To> r ~> ->*To>* s

\func >To->* {t t' : LambdaTerm} (h : t > t') : t ->* t'
\elim t, t', h
  | Var i, t', P-Var idp => refl idp
  | ⋅ s t, _, P-App h1 h2 idp => ->*.appHelper (>To->* h1) (>To->* h2)
  | ⋅ (Lam x s) t, u', P-Subs {s'} {t'} h1 h2 idp =>
    \let reduceLambda : (Lam x s ⋅ t) ->* (Lam x s' ⋅ t) => ->*.appHelper (->*.lamHelper (>To->* h1)) (refl idp)
         | reduceRight : (Lam x s' ⋅ t) ->* (Lam x s' ⋅ t') => ->*.appHelper (refl idp) (>To->* h2)
         | reduceBeta : (Lam x s' ⋅ t') ->1 subs s' x t' => (Beta, idp)
    \in reduceLambda ~~> reduceRight ~~> reduceBeta ~> refl idp
  | Lam v body, t', P-Lam h idp => ->*.lamHelper (>To->* h)


\func >*To->* {t t' : LambdaTerm} (h : t >* t') : t ->* t' \elim h
  | refl idp => refl idp
  | ~> r s => >To->* r ~~> >*To->* s

\func betaReduce \alias + (t : LambdaTerm) : LambdaTerm
  | Var i => Var i
  | Lam v body => Lam v (+ body)
  | ⋅ (Lam v body) arg => subs (+ body) v (+ arg)
  | ⋅ f arg => + f ⋅ + arg

{-
    t
   /|
  / |
 /  |
t'  2
 \  |
  \ |
   \|
    t⁺
 -}

\func >-triangle {t t' : LambdaTerm} (h : t > t') : t' > + t
\elim t, h
  | Var i, P-Var idp => P-Var idp
  | Lam x t, P-Lam h idp => P-Lam (>-triangle h) idp
  | ⋅ (Lam x s) t, P-Subs h1 h2 idp => >.subsHelper (>-triangle h1) (>-triangle h2)
  | ⋅ (Var i) t, P-App h1 h2 idp => P-App (>-triangle h1) (>-triangle h2) idp
  | ⋅ (⋅ f arg) t, P-App h1 h2 idp => P-App (>-triangle h1) (>-triangle h2) idp
  | ⋅ (Lam v body) t, P-App {s'} {t'} (P-Lam h1 idp) h2 idp => P-Subs (>-triangle h1) (>-triangle h2) idp

{-
    s
   /|\
  / | \
 /  |  \
t1   2   t2
 \  |  /
  \ | /
   \|/
    s⁺
 -}

\func >-diamond {s t1 t2 : LambdaTerm} (h1 : s > t1) (h2 : s > t2) : \Sigma (u : LambdaTerm) (t1 > u) (t2 > u) =>
  (+ s , >-triangle h1, >-triangle h2)

{-
    s
   / \
  1   *
 /     \
t       t′
 \     /
  *   1
   \ /
    u
 -}

\func strip {s t t' : LambdaTerm} (h1 : s > t) (h2 : s >* t') : \Sigma (u : LambdaTerm) (t >* u) (t' > u)
\elim h2
  | refl idp => (t, refl idp, h1)
  | ~> {t''} r rest => \let t>s+ => >-triangle h1 | (u, +s>*u, t'>u) => strip (>-triangle r) rest \in (u, t>s+ ~> +s>*u, t'>u)

\func >-confluent {s t1 t2 : LambdaTerm} (h1 : s >* t1) (s>*t2 : s >* t2) : \Sigma (u : LambdaTerm) (t1 >* u) (t2 >* u)
\elim h1
  | refl idp => (t2, s>*t2, refl idp)

  {-
          s
         / \
        1   *
       /     \
      t' (a)  t2
     / \     /
    *   *   1
   /     \ /
  t1 (b)  u
   \     /
    *   *
     \ /
      u′
  -}

  | ~> {t'} s>t' t'>*t1 =>
    \let (u, t'>*u, t2>u) => strip s>t' s>*t2
         | (u', t1*>u', u*>u') => >-confluent t'>*t1 t'>*u
    \in (u', t1*>u', t2>u ~> u*>u')

\func ->-confluent {s t1 t2 : LambdaTerm} (h1 : s ->* t1) (h2 : s ->* t2) : \Sigma (u : LambdaTerm) (t1 ->* u) (t2 ->* u)
  => \let (u, h1', h2') => >-confluent (->*To>* h1) (->*To>* h2)
     \in (u, >*To->* h1', >*To->* h2')

\where {
  \func confluent-normal {s t1 v : LambdaTerm} (h1 : s ->* t1) (h2 : s ->* v) (norm : Normal v) : t1 ->* v
    => \let (u, t1->*u, v->*u) => ->-confluent h1 h2
      \in \case v->*u \with {
        | refl v=u => rewrite v=u t1->*u
        | ~> r s1 => absurd (norm (_, r))
      }
}