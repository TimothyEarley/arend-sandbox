\import Algebra.Monoid
\import Arith.Int
\import Arith.Nat
\import Data.Array
\import Data.Fin (fsuc)
\import Data.List (List)
\import Data.Maybe
\import Function.Meta
\import HLevel
\import Logic
\import Logic.Meta
\import Meta
\import Order.Lattice
\import Order.PartialOrder
\import Paths
\import Paths.Meta
\import Relation.Equivalence
\import Set (Dec, DecSet, no, yes)
\import identity.DecMaps
\open DArray (!!)
\open ArrayUtils (contains)

\module ArrayUtils \where {
  \func \infixl 9 ?? {A : \Type} (a : Array A) (i : Nat) : Maybe A \elim a, i
    | nil, _ => nothing
    | :: a arr, 0 => just a
    | :: a arr, suc i => arr ?? i
    \where {
      \func ++-left {A : \Type} {as as' : Array A} {x : A} {i : Nat} (h : as ?? i = just x) : (as ++ as') ?? i = just x
      \elim as, i, h
        | :: a arr, 0, h => h
        | :: a arr, suc i, h => ++-left h

      \func ++-right {A : \Type} {as as' : Array A} {x : A} {i : Nat} (h : as' ?? i = just x) : (as ++ as') ?? (DArray.len {as} + i) = just x
      \elim as
        | nil => h
        | :: a arr => ++-right h
    }

  \func \infixl 9 ??i {A : \Type} (a : Array A) (i : Int) : Maybe A \elim i
    | pos n => a ?? n
    | neg 0 => a ?? 0
    | neg (suc n) => nothing
    \where {
      \func ++-left {A : \Type} {as as' : Array A} {x : A} {i : Int} (h : as ??i i = just x) : (as ++ as') ??i i = just x
      \elim i
        | pos n => ??.++-left h
        | neg 0 => ??.++-left h
        | neg (suc n) => \case h

      \func ++-right {A : \Type} {as as' : Array A} {x : A} {i : Int} (h : as' ??i i = just x) : (as ++ as') ??i (pos (DArray.len {as}) + i) = just x
      \elim i
        | pos n => ??.++-right h
        | neg 0 => ??.++-right h
        | neg (suc n) => \case h
    }

  \func arrayOf {A : \Type} (val : A) {n : Nat} : Array A n => mkArray (\lam f => val)
  \func arrayOf' {A : \Type} (val : A) {n : Nat} : Array A n
    \elim n
      | 0 => nil
      | suc n => val :: arrayOf' val
  \where {
    \func atIndex= {A : \Type} {val : A} {n : Nat} {j : Fin n} : arrayOf' val {n} j = val
      \elim n, j
        | suc n, 0 => idp
        | suc n, suc j => atIndex=
  }
  \func arrayOf= {A : \Type} {val : A} {n : Nat} : arrayOf val {n} = arrayOf' val {n}
    => ext (idp,
            ext (\lam j => inv arrayOf'.atIndex=))

  --  \func set {n : Nat} {A : \Type} (a : Array A n) (i : Fin n) (v : A) : Array A n =>
  --    \lam j => \case i fin≟ j \return A \with {
  --      | yes e => v
  --      | no n => a j
  --    }

  -- hopefully faster, even though we eagerly create a new array
  -- this is because otherwise Arend leaves things lazy and ends up doing duplicate work (I think)

  \func set {n : Nat} {A : \Type} (a : Array A n) (i : Fin n) (v : A) : Array A n \elim n, a, i
    | suc n, :: a a1, 0 => v :: a1
    | suc n, :: a a1, suc i => a :: set a1 i v
    \where {
      \func getAtSet {A : \Type} {n : Nat} {a : Array A n} {i : Fin n} {v : A}
        : set a i v i = v \elim n, a, i
        | suc n, a :: a1, 0 => idp
        | suc n, a :: a1, suc i => getAtSet

      \func getAtNotSet {A : \Type} {n : Nat} {a : Array A n} {i i' : Fin n} (h : i /= i') {v : A}
        : set a i v i' = a i' \elim n, a, i, i'
        | suc n, a :: a1, 0, 0 => contradiction
        | suc n, a :: a1, 0, suc i' => idp
        | suc n, a :: a1, suc i, 0 => idp
        | suc n, a :: a1, suc i, suc i' => getAtNotSet (\lam p => h $ pmap fsuc p)
    }

  \func maxOf {A : JoinSemilattice} {n : Nat} (l : Array A (suc n))
    : \Sigma (m : A) (\Pi (i : Fin (suc n)) -> l i Order.PartialOrder.<= m)
    => maxOfOr l (\case l \with {| a :: _ => a})
    \where {
      \func maxOfOr {A : JoinSemilattice} (l : Array A) (else : A)
        : \Sigma (m : A) (\Pi (i : Fin l.len) -> l i Order.PartialOrder.<= m)
      \elim l
        | nil => (else, \case __)
        | a :: l =>
          \let (m', h') => maxOfOr l a
          \in (a ∨ m', \case \elim __ \with {
            | 0 => join-left
            | suc i => h' i <=∘ join-right
          })
    }

  \func All {A : \Type} (v : Array A) (P : A -> \Prop) : \Prop => Big (\lam a r => \Sigma (P a) r) (\Sigma) v
    \where {
      \func all++ {A : \Type} {v v' : Array A} {P : A -> \Prop} (h : All v P) (h' : All v' P) : All (v ++ v') P
      \elim v
        | nil => h'
        | :: a arr => (h.1, all++ h.2 h')
    }

  \func HasSome {A : \Type} {n : Nat} (v : Array A n) (P : A -> \Prop) : \Prop => ∃ (i : Fin n) (P (v i))
    \where {
      \func hasSome? {A : \Type} {n : Nat} (v : Array A n) {P : A -> \Prop} (d : \Pi (a : A) -> Dec (P a)) : Dec (HasSome v P)
      \elim n, v
        | 0, nil => no (\case __ \with {
          | inP ((), _)
        })
        | suc n, :: a v => \case d a \with {
          | yes e => yes (inP (0, e))
          | no n1 => \case hasSome? v d \with {
            | yes (inP (i, p)) => yes (inP (suc i, p))
            | no n2 => no (\case __ \with {
              | inP (0, p) => n1 p
              | inP ((suc f,p)) => n2 (inP (f, p))
            })
          }
        }
    }

  \func toList {A : \Type} (a : Array A) : List A \elim a
    | nil => List.nil
    | :: a arr => a List.:: toList arr

  \func zipWithNext {A : \Type} {n : Nat} (v : Array A (suc n)) : Array (\Sigma A A) n \elim n, v
    | 0, :: a nil => nil
    | suc n, :: a (:: a' v) => (a, a') :: zipWithNext (a' :: v)

  \func ++-length {A : \Type} {xs ys : Array A} : DArray.len {xs} Nat.+ DArray.len {ys} = DArray.len {xs ++ ys} \elim xs
    | nil => idp
    | :: x xs => pmap suc ++-length

  \func dropLast {n : Nat} {A : Fin (suc n) -> \Type} (d : DArray {suc n} A) : DArray {n} (A __) =>
    d __ -- same function, we just don't use the last entry

  \func rev {n : Nat} {A : Fin n -> \Type} (d : DArray A) (i : Fin n) : Rev A i \elim n, d, i
    | suc n, d, 0 => d n
    | suc n, d, suc i => rev {n} {A __} (dropLast d) i
    \where {
      \func Rev {n : Nat} (A : Fin n -> \Type) (i : Fin n) : \Type \elim n, i
        | suc n, 0 => A n
        | suc n, suc i => Rev {n} (A __) i

      \func example : rev (1 :: 2 :: 3 :: nil) = {Array Nat} 3 :: 2 :: 1 :: nil => idp
    }

  \func headOr {A : \Type} (or : A) (d : Array A)  : A \elim d
    | nil => or
    | :: a arr => a

  \func tail {A : \Type} (d : Array A) : Array A \elim d
    | nil => nil
    | :: a d => d

  \func dTail {n : Nat} {A : Fin (suc n) -> \Type} (d : DArray A) : DArray (\lam i => A (suc i)) \elim d
    | :: a d => d

  \func append \alias \infixl 6 ::- {A : \Type} (d : Array A) (a : A) : Array A \elim d
    | nil => a :: nil
    | :: a' arr => a' :: (arr ::- a)
    \where {
      \func to++ {A : \Type} {l : Array A} {a : A} : l ::- a = l ++ (a :: nil) \elim l
        | nil => idp
        | :: a1 arr => pmap {Array A} (a1 :: __) to++

      \func compose++ {A : \Type} {l l' : Array A} {a : A} : l ::- a ++ l' = l ++ a :: l' \elim l
        | nil => idp
        | :: a1 arr => pmap {Array A} (a1 :: __) compose++

      \func notNil {A : \Type} {l : Array A} {a : A} : Not (l ::- a = nil) \elim l
        | nil => \case __
        | :: a1 arr => \case __

      \func heads= {A : \Type} {l l' : Array A} {a a' : A} (p : l ::- a = l' ::- a') : l = l' \elim l, l'
        | nil, nil => idp
        | nil, :: a1 arr => absurd $ notNil (inv $ pmap tail p)
        | :: a1 arr, nil => absurd $ notNil (pmap tail p)
        | :: a1 arr, :: a2 arr1 => pmap2 {A} {Array A} (__ :: __) (pmap (headOr a1) p) (heads= (pmap tail p))
    }

  \func contains {A : DecSet} (arr : Array A) (a : A) : Dec (TruncP (Index a arr))
  \elim arr
    | nil => no (\lam (inP (i, _)) => \case i)
    | :: a' arr => \case A.decideEq a' a \with {
      | yes e => yes (inP (0, e))
      | no n => decMap (contains arr a)
          (\lam (inP (i, h)) => inP (suc i, h),
           \lam h => \case \elim h \with {
             | inP (0, h) => absurd (n h)
             | inP (suc i, h) => inP (i, h)
           })
    }

  \func indexMap {A B : \Type} {b : B} (arr : Array A) (f : A -> B)
                 (h : Index b (map f arr))
    : \Sigma (a : A) (f a = b) (Index a arr) => (arr !! h.1, h.2, (h.1, idp))

  \func indexMap' {A B : \Type} {a : A} {arr : Array A} (f : A -> B)
                  (h : Index a arr)
    : Index (f a) (map f arr) => (h.1, pmap f h.2)

  \func mapRepresentatives {A : \Type} {R : A -> A -> \Type} {l : Nat} (d : Array (Quotient R) l) : TruncP (Array A l) \elim l, d
    | 0, nil => inP nil
    | suc l, :: (in~ a) d => \case mapRepresentatives d \with {
      | inP d' => inP (a :: d')
    }
}

\func NoDup {A : \Type} (l : Array A) : \Type => \Pi (a : A) -> isProp (Index a l)
  \where {
    \func NoDup' {A : \Type} (l : Array A) : \Type \elim l
      | nil => \Sigma
      | :: a arr => \Sigma (Not (Index a arr)) (NoDup' arr)

    \func from' {A : \Set} {l : Array A} (h : NoDup' l) : NoDup l \elim l
      | nil => \lam a aIn aIn' => \case aIn \with {
      ((), _)
      }
      | :: a arr => \lam x aIn aIn' => \case \elim aIn, \elim aIn' \with {
        | (0, aIn), (0, aIn') => ext idp
        | (0, aIn), (suc i', aIn') => absurd (h.1 (i', aIn' *> inv aIn))
        | (suc i, aIn), (0, aIn') => absurd (h.1 (i, aIn *> inv aIn'))
        | (suc i, aIn), (suc i', aIn') =>
          \let rec => from' h.2 x (i, aIn) (i', aIn')
          \in ext (pmap fsuc (pmap __.1 rec))
      }

    \func remDup {A : DecSet} (l : Array A) : Array A \elim l
      | nil => nil
      | :: a arr => \case contains arr a \with {
        | yes a1 => remDup arr
        | no n => a :: remDup arr
      }
      \where {
        \func complete {A : DecSet} {a : A} {l : Array A} (h : Index a l) : TruncP (Index a (remDup l)) \elim l, h
          | nil, ((),p)
          | :: a1 arr, (0, p) => cases (contains arr a1) \with {
            | yes (inP e) => complete (transport (Index __ arr) p e)
            | no n => inP (0, p)
          }
          | :: a1 arr, (suc i,p) => cases (contains arr a1) \with {
            | yes (inP e) => complete (i, p)
            | no n => \case complete (i, p) \with {
              | inP (i', p') => inP (suc i', p')
            }
          }

        \func sound {A : DecSet} {a : A} {l : Array A} (h : Index a (remDup l)) : Index a l \elim l, h
          | nil, ((),p)
          | :: a1 arr, h => sound-lemma (contains arr a1) h
          \where {
            \func sound-lemma {A : DecSet} {a a1 : A} {arr : Array A} (in? : Dec (TruncP (Index a1 arr))) (h : Index a (\case in? \with {
              | yes a2 => remDup arr
              | no n => a1 :: remDup arr
            })) : Index a (a1 :: arr) \elim in?, h
              | yes _, h => \let s' => sound h \in (suc s'.1, s'.2)
              | no _, (0, p) => (0, p)
              | no _, (suc i, p) => \let s' => sound (i, p) \in (suc s'.1, s'.2)
          }

        \func progress {A : DecSet} {l : Array A} : NoDup (remDup l) => NoDup.from' progress'
          \where {
            \func progress' {A : DecSet} {l : Array A} : NoDup' (remDup l) \elim l
              | nil => ()
              | :: a arr => mcases \with {
                | yes a1 => progress'
                | no n => (\lam i => n (inP $ sound i), progress')
              }
          }
      }
  }