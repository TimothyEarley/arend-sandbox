\import Algebra.Monoid
\import Arith.Int
\import Arith.Nat
\import Data.Fin
\import Logic
\import Meta
\import Order.LinearOrder
\import Order.PartialOrder
\import Order.StrictOrder
\import Paths
\import Paths.Meta
\import Util
\import util.Nat

\func pos</=neg {n m : Nat} (h : pos n <= neg (suc m)) : Empty
  => h idp

\func pos_+_neg_is_neg {n m : Nat} (p : n <= m) : \Sigma (x : Nat) (pos n + neg m = neg x)
  \elim n, m, p
    | 0, m, p => (m, idp)
    | suc n, 0, p => absurd (not<=0 p)
    | suc n, suc m, p => pos_+_neg_is_neg (suc<=suc.conv p)


\func coerceToFin (i : Int) {n : Nat} : Fin (suc n) \elim i
  | pos n1 => natCoerceToFin n1
  | neg 0 => 0
  | neg (suc n1) => 0
\where {
  \func natCoerceToFin (n : Nat) {m : Nat} : Fin (suc m)
    | 0, {_} => 0
    | suc n, {0} => 0
    | suc n, {suc m} => fsuc (natCoerceToFin n)
}

\func +isuc {x y : Int} : x + isuc y = isuc (x + y)
  \elim y
    | pos n => helper_pos
    | neg 0 => helper_pos
    | neg (suc n) => helper_neg
\where {
  \func helper_pos {x : Int} {y : Nat} : x + pos (suc y) = isuc (x + pos y)
    \elim x
      | pos n => idp
      | neg 0 => idp
      | neg (suc n) => unfold (helper_pos-lemma n y)

  \func helper_pos-lemma (n y : Nat) : y Nat.- n = isuc (y Nat.- suc n)
    | 0, 0 => idp
    | 0, 1 => idp
    | 0, suc (suc y) => idp
    | suc n, 0 => idp
    | suc n, suc y => helper_pos-lemma n y

  \func helper_neg {x : Int} {n : Nat} : x + neg n = isuc (x + neg (suc n)) \elim x
    | pos 0 => idp
    | pos (suc n1) => unfold (helper_neg-lemma n1 n)
    | neg n1 => idp

  \func helper_neg-lemma (n1 n : Nat) : suc n1 Nat.- n = isuc (n1 Nat.- n)
    | 0, 0 => idp
    | 0, 1 => idp
    | 0, suc (suc n) => idp
    | suc n1, 0 => idp
    | suc n1, suc n => helper_neg-lemma n1 n
}