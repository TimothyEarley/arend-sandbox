\import Data.Bool
\import Data.Maybe
\import Debug.Meta
\import Function
\import Function.Meta
\import Logic
\import Logic.Meta
\import Meta
\import Paths
\import typeclasses.Monad

\func Code {A : \Type} (a b : Maybe A) : \Type \elim a, b
  | just a, just a1 => a = a1
  | just a, nothing => Empty
  | nothing, just a => Empty
  | nothing, nothing => \Sigma

\func code-refl {A : \Type} {a : Maybe A} : Code a a \elim a
  | just a => idp
  | nothing => ()

\func encode {A : \Type} {a b : Maybe A} (p : a = b) : Code a b \elim p
  | idp => code-refl

\func decode {A : \Type} {a b : Maybe A} (c : Code a b) : a = b \elim a, b, c
  | just a, just a1, p => pmap just p
  | nothing, nothing, c => idp

\func dejust {A : \Type} {a b : A} (p : just a = just b) : a = b => encode p

\func \infix 7 fold {A : \Type} (m : Maybe A) {B : \Type} (f : \Sigma (A -> B) B) : B \elim m
  | just a => f.1 a
  | nothing => f.2

\func \infix 7 orElse {A : \Type} (m : Maybe A) (a : A) : A => m fold (id, a)

\func \infix 1 maybeMap {A B : \Type} (m : Maybe A) (f : \Pi A -> B) : Maybe B
  => MaybeMonad.fmap f m

\func \infix 1 maybeMap2 {A B C : \Type} (m : \Sigma (Maybe A) (Maybe B)) (f : \Pi A B -> C) : Maybe C
  \elim m
    | (nothing, _) => nothing
    | (_, nothing) => nothing
    | (just a,just a1) => just $ f a a1

\meta unwrap m => cases (m arg addPath) \with {
  | just x, _ => x
  | nothing, p => run {
    println m,
    contradiction
  }
}
  \where {
    \func test : unwrap (just 1) = 1 => idp

    \func testFail : fails (unwrap nothing) = () => idp

    \func f (n : Nat) : Maybe Nat | 0 => just 0 | suc n => nothing

    \func test2 : unwrap (f 0) = 0 => idp
  }

\func flatMapJust {A B : \Type} {f : A -> Maybe B} {m : Maybe A} {b : B}
                  (h : m >>= f = just b) : \Sigma (a : A) (m = just a) (f a = just b)
  \elim m, h
    | just a, h => (a, idp, h)
