\import Data.Maybe
\import Util
\import typeclasses.Functor
\import typeclasses.Monad

\func truncateNatToFin (i : Nat) {n : Nat} : Maybe (Fin n)
\elim i, n
  | _, 0 => nothing
  | 0, suc n => just 0
  | suc i, suc n => fmap fsuc (truncateNatToFin i {n})

  \where {
    \func test : \Sigma (truncateNatToFin 5 {10} = just 5)
                        (truncateNatToFin 5 {1} = nothing)
                        (truncateNatToFin 0 {1} = just 0)
                        (truncateNatToFin 0 {0} = nothing) => (idp, idp, idp, idp)
  }