\import Algebra.Group
\import Algebra.Monoid
\import Arith.Int
\import Data.Or
\import Paths
\import Set
\import Set.Hedberg
\import imp.BigStep
\import imp.Deterministic
\import imp.Syntax

-- Unique

\func uiaNum {a b : Num} (p q : a = b) : p = q => Hedberg (\lam a b => \case decideEq a b \with {
  | yes e => inl e
  | no n => inr n
}) a b p q

\func uniqueSemAExp {a : AExp} {s : State} {n : Num} (sem1 sem2 : SemAExp a s n) : sem1 = sem2 \elim a, sem1, sem2
  | aNum n, rNum p, rNum p1 => pmap rNum (uiaNum p p1)
  | aVar v, rVar p, rVar p1 => pmap rVar (uiaNum p p1)
  | aPlus a a1, rPlus n1 semA1 n2 semA2 idp, rPlus n3 semA3 n4 semA4 p1 =>
    \let p : n1 = n3 => detAExp semA1 semA3
         | p' : n2 = n4 => detAExp semA2 semA4
         \in \case \elim n3, \elim n4, p, p', \elim p1, \elim semA3, \elim semA4 \with {
      | _, _, idp, idp, p1, semA3, semA4 => path (\lam i => rPlus n1 (uniqueSemAExp semA1 semA3 @ i) n2 (uniqueSemAExp semA2 semA4 @ i) (uiaNum idp p1 @ i))
    }
  | aMinus a a1, rMinus n1 semA1 n2 semA2 idp, rMinus n3 semA3 n4 semA4 p1 =>
    \let p : n1 = n3 => detAExp semA1 semA3
         | p' : n2 = n4 => detAExp semA2 semA4
    \in \case \elim n3, \elim n4, p, p', \elim p1, \elim semA3, \elim semA4 \with {
      | _, _, idp, idp, p1, semA3, semA4 => path (\lam i => rMinus n1 (uniqueSemAExp semA1 semA3 @ i) n2 (uniqueSemAExp semA2 semA4 @ i) (uiaNum idp p1 @ i))
    }

  | aTimes a a1, rTimes n1 semA1 n2 semA2 idp, rTimes n3 semA3 n4 semA4 p1 =>
    \let p : n1 = n3 => detAExp semA1 semA3
         | p' : n2 = n4 => detAExp semA2 semA4
    \in \case \elim n3, \elim n4, p, p', \elim p1, \elim semA3, \elim semA4 \with {
      | _, _, idp, idp, p1, semA3, semA4 => path (\lam i => rTimes n1 (uniqueSemAExp semA1 semA3 @ i) n2 (uniqueSemAExp semA2 semA4 @ i) (uiaNum idp p1 @ i))
    }


-- induction principles

\func derivationInductionAExp
  (P : \Pi {a : AExp} {s : State} {n : Num} (SemAExp a s n) -> \Type)

  (h1 : \Pi (s : State) (n : Num) -> P {aNum n} {s} {n} (rNum idp))
  (h2 : \Pi (s : State) (x : Var) -> P {aVar x} {s} {s x} (rVar idp))
  (h3 : \Pi (s : State) (n1 n2 : Num) (a1 a2 : AExp) (H1 : SemAExp a1 s n1) (H2 : SemAExp a2 s n2) (P H1) (P H2)
    -> P {aPlus a1 a2} {s} {n1 + n2} (rPlus n1 H1 n2 H2 idp))
  (h4 : \Pi (s : State) (n1 n2 : Num) (a1 a2 : AExp) (H1 : SemAExp a1 s n1) (H2 : SemAExp a2 s n2) (P H1) (P H2)
    -> P {aTimes a1 a2} {s} {n1 * n2} (rTimes n1 H1 n2 H2 idp))
  (h5 : \Pi (s : State) (n1 n2 : Num) (a1 a2 : AExp) (H1 : SemAExp a1 s n1) (H2 : SemAExp a2 s n2) (P H1) (P H2)
    -> P {aMinus a1 a2} {s} {n1 - n2} (rMinus n1 H1 n2 H2 idp))

  (a : AExp) (s : State) (n : Num) (H : SemAExp a s n) : P H \elim a, H
  | aNum n, rNum idp => h1 s n
  | aVar v, rVar idp => h2 s v
  | aPlus a a1, rPlus n1 semA1 n2 semA2 idp   => h3 s n1 n2 a a1 semA1 semA2
      (derivationInductionAExp P h1 h2 h3 h4 h5 a s n1 semA1)
      (derivationInductionAExp P h1 h2 h3 h4 h5 a1 s n2 semA2)
  | aTimes a a1, rTimes n1 semA1 n2 semA2 idp => h4 s n1 n2 a a1 semA1 semA2
      (derivationInductionAExp P h1 h2 h3 h4 h5 a s n1 semA1)
      (derivationInductionAExp P h1 h2 h3 h4 h5 a1 s n2 semA2)
  | aMinus a a1, rMinus n1 semA1 n2 semA2 idp => h5 s n1 n2 a a1 semA1 semA2
      (derivationInductionAExp P h1 h2 h3 h4 h5 a s n1 semA1)
      (derivationInductionAExp P h1 h2 h3 h4 h5 a1 s n2 semA2)
