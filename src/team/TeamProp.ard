\import Data.Array
\import Data.Bool
\import Logic
\import Logic.Meta
\import LogicUtil
\import sets.Elements
\import sets.MySet
\import sets.subset
\import sets.union

\func Assignment (P : \Set) : \Set => P -> Bool

\func Team (P : \Set) : \Set => Ensemble (Assignment P)

\record Operator (P : \Set)
  | arity : Nat
  | eval : \Pi (semantics : Array (Team P -> \Prop) arity) (X : Team P) -> \Prop

\func Operators (P : \Set) => Ensemble (Operator P)

\data Term (P : \Set) (ops : Operators P)
  | term (op : Operator P) (op ∈ ops) (args : Array (Term P ops) op.arity)

\func models \alias \infix 6 ⊧ {P : \Set} {ops : Operators P} (X : Team P) (f : Term P ops) : \Prop \elim f
  | term (n, eval) e args => eval (mapArgs args) X

  \where {
    -- manual map to ensure termination
    \func mapArgs {P : \Set} {ops : Operators P} {n : Nat} (args : Array (Term P ops) n) : Array (Team P -> \Prop) n
    \elim n, args
      | 0, nil => nil
      | suc n, :: head tail => (\lam X => X ⊧ head) :: mapArgs tail
  }

\module StandardOperators \where {
  \func top \alias ⊤ {P : \Set} : Operator P \cowith
    | arity => 0
    | eval => \lam _ X => \Sigma

  \func bot \alias ⊥ {P : \Set} : Operator P \cowith
    | arity => 0
    | eval => \lam _ X => X = ∅

  \func predicate {P : \Set} (p : P) : Operator P \cowith
    | arity => 0
    | eval => \lam _ X => \Pi (s : Elements X) -> So (s.1 p)

  \func neg {P : \Set} (p : P) : Operator P \cowith
    | arity => 0
    | eval => \lam _ X => \Pi (s : Elements X) -> So (not (s.1 p))

  \func and {P : \Set} : Operator P \cowith
    | arity => 2
    | eval => \lam semantics X => \case \elim semantics \with {
      | :: f1 (:: f2 nil) => \Sigma (f1 X) (f2 X)
    }

  \func or {P : \Set} : Operator P \cowith
    | arity => 2
    | eval => \lam semantics X => \case \elim semantics \with {
      | :: f1 (:: f2 nil) => ∃ (X1 X2 : Team P) (X1 ⊆ X) (X2 ⊆ X) (X = X1 ∪ X2) (f1 X1) (f2 X2)
    }

  \func NE {P : \Set} : Operator P \cowith
    | arity => 0
    | eval => \lam _ X => Not (X = ∅)
}


