\import Arith.Nat
\import Function
\import Function.Meta
\import LeipnizEquality
\import Logic
\import Logic.Meta
\import LogicUtil
\import Meta
\import Order.PartialOrder
\import Paths
\import Paths.Meta
\import Set
\import Util
\import lambda.Reduction
\import logik.fol.FOL
\import logik.fol.TermDec
\import sets.Elements
\import util.ArrayUtils
\open NatSemiring (+-comm)
\open Formula (Subst, extends, renamesAt, subTermsAt, subst)
\open DArray (!!)
\open Term (AnyFreeVar, FreeVar, termDepth)
\open Semantics (Structure, ⊧, ⊫f)
\open Semantics.Interpretation (subOne, subOneRename)
\open LeipnizIsEqual (i)

\module Semantics \where {
  \record Structure (L : Language)
    | Universe : \Set
    | rel : \Pi (r : Relations) (args : Array Universe (relationsArity r)) -> \Prop
    | funcs : \Pi (f : Functions) (args : Array Universe (functionArity f)) -> Universe

  \func Interpretation {L : Language} (n : Nat) => \Sigma (S : Structure L) (Fin n -> S.Universe)
    \where {
      \func subst {L : Language} {n m : Nat} (I : Interpretation n) (s : Subst m n) : Interpretation m =>
        (I.1, \lam f => evaluate I (s f))

      \func subOne {L : Language} {n : Nat} (I : Interpretation n) (with : Universe {I.1}) : Interpretation (suc n) =>
        (I.1, \lam f => \case \elim f \with {
          | 0 => with
          | suc f => I.2 f
        })

      \func subOneRename {L : Language} {n : Nat} {I : Interpretation n}
                         {x : Universe {I.1}} (t : Term n)
        : evaluate (subOne I x) (Formula.rename fsuc t) = evaluate I t \elim t
        | var f => idp
        | apply f d => unfold $ pmap (funcs {I.1} f) (ext (ext (\lam j => rewriteF (inv (renamesAt j)) (subOneRename (d j)))))
    }

  \func evaluate {L : Language} {n : Nat} (I : Interpretation n) (t : Term n) : Universe {I.1} \elim t
    | var i => I.2 i
    | apply f d => funcs {I.1} f (\lam j => evaluate I (d j))

  \func models \alias \infix 4 ⊧ {L : Language} {n : Nat} (I : Interpretation n) (f : Formula n) : \Prop \elim f
    | equal x y => evaluate I x = evaluate I y
    | atomic r d => rel {I.1} r (\lam j => evaluate I (d j))
    | impH x y => (I ⊧ x) -> (I ⊧ y)
    | notH f => Not (I ⊧ f)
    | forallH f => \Pi (x : Universe {I.1}) -> (subOne I x) ⊧ f

  \func notModels \alias \infix 4 ⊭ {L : Language} {n : Nat} (I : Interpretation n) (f : Formula n) : \Prop =>
    Not (I ⊧ f)

  \func modelImplies \alias \infix 6 ⊫f {L : Language} {n : Nat} (x y : Formula n) : \Prop =>
    \Pi (I : Interpretation n) (I ⊧ x) -> I ⊧ y

  \func substitutionLemma {L : Language} {n : Nat}
                          (phi : Formula n) (ts : Subst n 0)
                          (I : Interpretation 0) :
    (I ⊧ subst ts phi) <-> (Interpretation.subst I ts ⊧ phi) =>
    (substitutionLemma->, substitutionLemma<-)

    \where {
      \func termCoincidenceLemma {L : Language} {n : Nat} {U : \Set}
                                 {S1 S2 : Structure L U}
                                 {a1 a2 : Fin n -> U}
                                 {t : Term n}
                                 (h1 : \Pi (f : L.Functions) -> S1.funcs f = S2.funcs f)
                                 (h2 : \Pi {i : Fin n} (free : FreeVar t i) -> a1 i = a2 i)
        -- easy termination check
                                 {depth : Nat} (rh : termDepth t <= depth)
        : evaluate (S1, a1) t = evaluate (S2, a2) t
      \elim t, depth
        | var f, depth => h2 idp
        | apply f d, 0 => absurd (rh NatSemiring.zero<suc)
        | apply f d, suc depth =>
          \let p : (\lam j => evaluate (S1, a1) (d j)) = {Array U (functionArity f)} (\lam j => evaluate (S2, a2) (d j))
          => ext (ext (\lam j => termCoincidenceLemma h1 (\lam {i} free => h2 (inP (j, free))) {depth} (<=-transitive termDepth.maxTermDepthIsBigger (suc<=suc.conv rh))))
          \in transportInv
              (__ (\lam j => evaluate (S1, a1) (d j)) = S2.funcs f (\lam j => evaluate (S2, a2) (d j)))
              (h1 f)
              (pmap (S2.funcs f) p)

      \func coincidenceLemma {L : Language} {n : Nat} {U : \Set}
                             {S1 S2 : Structure L U}
                             {a1 a2 : Fin n -> U}
                             (f : Formula n) (m : (S1, a1) ⊧ f)
                             (h1 : \Pi (f : L.Functions) -> S1.funcs f = S2.funcs f)
                             (h2 : \Pi (r : L.Relations) -> S1.rel r = S2.rel r)
                             (h3 : \Pi {i : Fin n} (free : Formula.FreeVar f i) -> a1 i = a2 i)
        : (S2, a2) ⊧ f
      \elim f
        | equal x y =>
          \let
            | xc => termCoincidenceLemma h1 (\lam free => h3 (byLeft free)) <=-reflexive
            | yc => termCoincidenceLemma h1 (\lam free => h3 (byRight free)) <=-reflexive
          \in inv xc *> m *> yc
        | atomic r d =>
          \let
            | d1 => \new Array S1.Universe (relationsArity r) (\lam j => evaluate (S1, a1) (d j))
            | d2 => \new Array S2.Universe (relationsArity r) (\lam j => evaluate (S2, a2) (d j))
            | d2=d1 : d2 = {Array U (relationsArity r)} d1 =>
              ext (ext (\lam (j : Fin (relationsArity r)) => inv (termCoincidenceLemma h1 (\lam free => h3 (inP (j, free))) <=-reflexive)))
            | r= : S2.rel r d2 = S1.rel r d1 => rewrite (h2 r) (pmap (S2.rel r) d2=d1)
          \in transportInv id r= m
        | impH x f => \lam m1 =>
            \let
              | fx => coincidenceLemma x m1 (invPi h1) (invPi h2) (\lam free => inv (h3 (byLeft free)))
              | fc => coincidenceLemma f (m fx) h1 h2 (\lam free => h3 (byRight free))
            \in fc
        | notH f => \lam m1 =>
            \let
              | fc => coincidenceLemma f m1 (invPi h1) (invPi h2) (\lam {i} free => inv (h3 free))
            \in m fc
        | forallH f => \lam x =>
            coincidenceLemma {L} {suc n} {U} {S1} {S2}
                {(subOne (S1, a1) x).2}
                {(subOne (S2, a2) x).2}
                f
                (m x)
                h1
                h2
                (\lam {i} free => \case \elim i, free \with {
                  | 0, free => idp
                  | suc i, free => h3 free
                })

      \func termSubstitution {L : Language} {n m : Nat} {I : Interpretation m}
                             {ts : Subst n m} (x : Term n)
        : evaluate (Interpretation.subst I ts) x = evaluate I (Formula.subTerm ts x)
      \elim x
        | var f => idp
        | apply f d => pmap (funcs {I.1} f) (ext (ext (\lam j =>
            \let
              | goal' : evaluate (Interpretation.subst I ts) (d j) = evaluate I (Formula.subTerm ts (d j)) => termSubstitution (d j)
              | goal : evaluate (Interpretation.subst I ts) (d j) = evaluate I (Formula.subTerms ts d j) => rewriteF (inv (subTermsAt j)) goal'
            \in goal
        )))

      \func substitutionLemma-> {L : Language} {n m : Nat} {I : Interpretation m}
                                {ts : Subst n m} {phi : Formula n}
                                (h : I ⊧ subst (ts !! __) phi):
        Interpretation.subst I (ts !! __) ⊧ phi \elim phi, h
        | equal x y, p => termSubstitution x *> p *> inv (termSubstitution y)
        | atomic r d, h => transport
            (rel {I.1} r)
            (ext (ext (\lam j => inv (rewriteF (inv (subTermsAt j)) (termSubstitution (d j))))))
            h
        | impH x phi, h => \lam m => substitutionLemma-> (h (substitutionLemma<- m))
        | notH phi, h => \lam m => h (substitutionLemma<- m)
        | forallH phi, h => \lam x =>
            \let
              | psi =>  subst (Formula.extends ts) phi
              | h' : subOne I x ⊧ psi => h x
              | h'' : Interpretation.subst (subOne I x) (extends ts) ⊧ phi => substitutionLemma-> h'
              | goal : subOne ((Interpretation.subst I ts)) x ⊧ phi => coincidenceLemma
                  phi
                  h''
                  (\lam f => idp)
                  (\lam r => idp)
                  (\lam {i} free => \case \elim i \with {
                    | 0 => idp
                    | suc i => subOneRename (ts i)
                  })
            \in goal

      \func substitutionLemma<- {L : Language} {n m : Nat} {I : Interpretation m}
                                {ts : Subst n m} {phi : Formula n}
                                (h : Interpretation.subst I ts ⊧ phi)
        : I ⊧ subst ts phi  \elim phi, h
        | equal x y, p => inv (termSubstitution x) *> p *> termSubstitution y
        | atomic r d, h => transport
            (rel {I.1} r)
            (ext (ext (\lam j => (rewriteF (inv (subTermsAt j)) (termSubstitution (d j))))))
            h
        | impH x phi, h => \lam m => substitutionLemma<- (h (substitutionLemma-> m))
        | notH phi, h => \lam m => h (substitutionLemma-> m)
        | forallH phi, h => \lam x =>
            \let
              | psi => subst (Formula.extends ts) phi
              | h' : subOne (Interpretation.subst I ts) x ⊧ phi => h x
              | h'' : Interpretation.subst (subOne I x) (extends ts) ⊧ phi => coincidenceLemma
                  phi
                  h'
                  (\lam f => idp)
                  (\lam r => idp)
                  (\lam {i} free => \case \elim i \with {
                    | 0 => idp
                    | suc i => inv (subOneRename (ts i))
                  })
              | goal : subOne I x ⊧ psi => substitutionLemma<- {L} {_} {suc m} {subOne I x} h''
            \in goal
    }

  \func logicalEquivalent \alias \infix 2 ≡ {L : Language} {n : Nat} (x y : Formula n) : \Prop =>
    \Sigma (x ⊫f y) (y ⊫f x)

  \func example : (NatStructure, nil) ⊧ {MonoidLang} forallH (forallH (equal
      (apply plus ((var 0) :: (var 1) :: nil))
      (apply plus ((var 1) :: (var 0) :: nil))
  )) => \lam x y => +-comm
    \where {
      \func MonoidLang : Language \cowith
        | Relations => Empty
        | relationsArity => absurd
        | Functions => MonoidFunctions
        | functionArity f => \case f \with {
          | plus => 2
        }

      \data MonoidFunctions | plus

      \func NatStructure : Structure MonoidLang \cowith
        | Universe => Nat
        | rel r => absurd r
        | funcs f args => \case \elim f, args \with {
          | plus, :: x (:: y nil) => x Nat.+ y
        }
    }
}

\record SystemModel (L : Language) (S : System)
  | structure : Structure L
  | modelsAll : \Pi (f : Elements S) -> (structure, \case __) ⊧ f.1
