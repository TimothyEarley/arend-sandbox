\import Function.Meta
\import Logic
\import Meta
\import Paths
\import Paths.Meta
\import Relation.Equivalence
\import Set \hiding (#)
\import logik.fol.FOL
\import logik.fol.FormulaDec
\import logik.fol.Semantics
\import sets.Add
\import sets.DecidableSet
\import sets.MySet
\import sets.finite.Sized
\import sets.remove
\import sets.subset
\open Formula (Subst, extends, sub, subTerm, subTermLift, subTermsAt, subst)
\open Semantics (Interpretation, evaluate, ⊧)
\open Interpretation (subOneRename)

\module SequentCalulus \where {
  \data SequentProof \alias \infix 5 ⊢ {L : Language} {n : Nat} (axioms : Ensemble (Formula n)) (toShow : Formula n)
  \elim toShow
    | toShow => Ass (toShow ∈ axioms)
    | toShow => PC (psi : Formula n) (add {Formula n} axioms psi ⊢ toShow) (add axioms (notH psi) ⊢ toShow)
    | toShow => Ctr (psi : Formula n)
                    (add axioms (notH toShow) ⊢ psi) (add axioms (notH toShow) ⊢ notH psi)

    -- TODO ...

    | impH x y => impIntro (add axioms x ⊢ y)
    | impH x y => impIntro' (axioms ⊢ notH x)
    | toShow =>   impElim (phi psi : Formula n) ((phi impH psi) ∈ axioms) (add axioms (notH phi) ⊢ toShow) (add axioms psi ⊢ toShow)

    | equal x y => E-Refl (x = y)
    | toShow => E-Subst (t t' : Term n) (equal t t' ∈ axioms)
                        (phi : Formula (suc n))
                        (axioms ⊢ sub phi t)
                        (p : toShow = sub phi t')
    \where {
      \func Contr' {L : Language} {n : Nat} {axioms :  Ensemble (Formula n)} {toShow : Formula n}
                   (phi : Formula n) (h : axioms ⊢ phi) (h' : axioms ⊢ notH phi) : axioms ⊢ toShow =>
        Ctr phi (weaken h (byLeft __)) (weaken h' (byLeft __))

      \func MP {L : Language} {n : Nat} {axioms :  Ensemble (Formula n)} {toShow : Formula n}
               (phi : Formula n) (h : axioms ⊢ phi) (h' : add axioms phi ⊢ toShow)
        : axioms ⊢ toShow => PC phi
          h'
          (Contr' phi (weaken h (byLeft __)) (Ass (byRight idp)))

      \func E-Subst' {L : Language} {n : Nat} {axioms : Ensemble (Formula n)}
                     (t t' : Term n) (te : axioms ⊢ equal t t') (phi : Formula (suc n))
                     (h : axioms ⊢ sub phi t)
                     {toShow : Formula n} (p : toShow = sub phi t') : axioms ⊢ toShow =>
        MP (equal t t') te (E-Subst t t' (byRight idp) phi (weaken h (byLeft __)) p)

      \func E-Symm {L : Language} {n : Nat} {axioms : Ensemble (Formula n)}
                   {x y : Term n}
                   (h : axioms ⊢ equal x y) : axioms ⊢ equal y x =>
        E-Subst' x y h
            (equal (var 0) (Term.lift x))
            (unfold sub $ rewrite (subTermLift _ (\lam f => idp)) (E-Refl idp))
            (unfold sub $ rewrite (subTermLift _ (\lam f => idp)) idp)

      \func E-Trans {L : Language} {n : Nat} {axioms : Ensemble (Formula n)}
                    {x y z : Term n}
                    (h : axioms ⊢ equal x y) (h' : axioms ⊢ equal y z) : axioms ⊢ equal x z =>
        \let h'' :  add axioms (equal y z) ⊢ equal x y => weaken h (byLeft __)
        \in E-Subst' y z h'
            (equal (Term.lift x) (var 0))
            (unfold sub $ rewrite (subTermLift _ (\lam f => idp)) h)
            (unfold sub $ rewrite (subTermLift _ (\lam f => idp)) idp)

      -- TruncP because thats where we use it

      \func CP3 {L : Language} {n : Nat}
                {axioms : Ensemble (Formula n)} {x y : Formula n}
                (h : add axioms (notH y) ⊢ x)
        : add axioms (notH x) ⊢ y => Ctr x
          (weaken h (\case __ \with {
            | byLeft a => byLeft (byLeft a) | byRight b => byRight b
          }))
          (Ass (byLeft (byRight idp)))

      \func elim-notnot {L : Language} {n : Nat} {axioms : Ensemble (Formula n)} {f : Formula n}
                        (h : axioms ⊢ notH (notH f))
        : axioms ⊢ f => MP (notH (notH f)) h (CP3 (Ass (byRight idp)))

      --      \func intro-notnot {L : Language} {n : Nat} {axioms : Ensemble (Formula n)} {f : Formula n}
      --                         (h : axioms ⊢ f)
      --        : axioms ⊢ notH (notH f) => {?}

      \func CP4 {L : Language} {n : Nat}
                {axioms : Ensemble (Formula n)} {x y : Formula n}
                (h : add axioms y ⊢ notH x)
        : add axioms x ⊢ notH y =>
        Ctr x
            (Ass (byLeft (byRight idp)))
            (MP y
                (elim-notnot (Ass (byRight idp)))
                (weaken h (\case __ \with {
                  | byLeft a => byLeft (byLeft (byLeft a)) | byRight b => byRight b
                })))

      --      \func intro-not {L : Language} {n : Nat}
      --                      {axioms : Ensemble (Formula n)} {f : Formula n}
      --                      (h : Not (axioms ⊢ f))
      --        : axioms ⊢ notH f => PC f
      --          {?}
      --          (Ass (byRight idp))

      \func CtrNot {L : Language} {n : Nat} {axioms : Ensemble (Formula n)}
                   {f : Formula n}
                   (psi : Formula n)
                   (h1 : add axioms f ⊢ psi)
                   (h2 : add axioms f ⊢ notH psi)
        : axioms ⊢ notH f => Ctr psi
          (MP f
              (elim-notnot (Ass (byRight idp)))
              (weaken h1 (\case __ \with {
                | byLeft a => byLeft (byLeft a) | byRight b => byRight b
              })))
          (MP f
              (elim-notnot (Ass (byRight idp)))
              (weaken h2 (\case __ \with {
                | byLeft a => byLeft (byLeft a) | byRight b => byRight b
              })))

      \func elim-or {L : Language} {n : Nat} {axioms : Ensemble (Formula n)}
                    {x y toShow : Formula n} (h : (x orH y) ∈ axioms)
                    (h1 : add axioms x ⊢ toShow)
                    (h2 : add axioms y ⊢ toShow)
        : axioms ⊢ toShow => impElim (notH x) y h
          (MP x (elim-notnot (Ass (byRight idp))) (weaken h1 (\case __ \with {
            | byLeft a => byLeft (byLeft a)
            | byRight b => byRight b
          })))
          h2

      --      \func intro-or1 {L : Language} {n : Nat} {axioms : Ensemble (Formula n)}
      --                      {x y : Formula n} (h : axioms ⊢ x) : axioms ⊢ x orH y => impIntro' (intro-notnot h)

      \func intro-or2 {L : Language} {n : Nat} {axioms : Ensemble (Formula n)}
                      {x y : Formula n} (h : axioms ⊢ y) : axioms ⊢ x orH y => impIntro (weaken h (byLeft __))

      \func intro-and {L : Language} {n : Nat} {axioms : Ensemble (Formula n)}
                      {x y : Formula n} (h1 : axioms ⊢ x) (h2 : axioms ⊢ y) : axioms ⊢ x andH y =>
        \let | z : Formula n => x -- does not matter
             | axioms' => add axioms (notH x orH notH y)
             | proof : \Pi (xi : Formula n) -> axioms' ⊢ xi
             => \lam xi =>  elim-or {L} {n} {axioms'} {notH x} {notH y} {xi} (byRight idp)
                   (CP3 (weaken h1 (\lam e => byLeft (byLeft e))))
                   (CP3 (weaken h2 (\lam e => byLeft (byLeft e))))
        \in CtrNot
            z
            (proof z)
            (proof (notH z))

      \func intro-<->H {L : Language} {n : Nat} {axioms : Ensemble (Formula n)}
                       {x y : Formula n} (h1 : axioms ⊢ x impH y) (h2 : axioms ⊢ y impH x)
        : axioms ⊢ (x <->H y) => intro-and h1 h2
    }

  \func weaken {L : Language} {n : Nat} {axioms axioms' : Ensemble (Formula n)} {toShow : Formula n}
               (h : axioms ⊢ toShow) (s : axioms ⊆ axioms') : axioms' ⊢ toShow \elim toShow, h
    | toShow, Ass e => Ass (s e)
    | toShow, PC psi h1 h2 => PC psi
        (weaken h1 (\case __ \with {
          | byLeft a => byLeft (s a) | byRight b => byRight b
        }))
        (weaken h2 (\case __ \with {
          | byLeft a => byLeft (s a) | byRight b => byRight b
        }))
    | toShow, Ctr psi h1 h2 => Ctr psi
        (weaken h1 (\case __ \with {
          | byLeft a => byLeft (s a) | byRight b => byRight b
        }))
        (weaken h2 (\case __ \with {
          | byLeft a => byLeft (s a) | byRight b => byRight b
        }))
    | equal x y, E-Refl p => E-Refl p
    | toShow, E-Subst t t' e phi h p => E-Subst t t' (s e) phi (weaken h s) p
    | impH x toShow, impIntro h => impIntro (weaken h (⊆.unionSubset' s ⊆.refl))
    | impH x toShow, impIntro' h => impIntro' (weaken h s)
    | toShow, impElim x y h h1 h2 => impElim x y (s h) (weaken h1 (⊆.unionSubset' s ⊆.refl)) (weaken h2 (⊆.unionSubset' s ⊆.refl))

  \func entails \alias \infix 6 ⊫e {L : Language} (from : Ensemble (Formula 0)) (to : Formula 0) =>
    \Pi (I : Interpretation 0) (h : \Pi {f : Formula 0} (f ∈ from) -> I ⊧ f) -> I ⊧ to

  \func proofIsEntails
    {L : Language} {from : Ensemble (Formula 0)} {to : Formula 0}
    (decidable : \Pi (I : Interpretation 0) (f : Formula 0) -> Dec (I ⊧ f))
    (h : from ⊢ to) : from ⊫e to
  \elim to, h
    | to, Ass e => \lam I h => h e
    | to, PC psi h1 h2 => \lam I h =>
        \let dec : Dec (I ⊧ psi) => decidable I psi
        \in \case dec \with {
          | yes e => proofIsEntails decidable h1 I (\case __ \with {
            | byLeft a => h a
            | byRight p => rewriteI p e
          })
          | no n => proofIsEntails decidable h2 I (\case __ \with {
            | byLeft a => h a
            | byRight p => rewriteI p n
          })
        }
    | to, Ctr psi h1 h2 => \lam I h => \case decidable I to \with {
      | yes e => e
      | no n =>
        \let
          | Ipsi => proofIsEntails decidable h1 I (\case __ \with {
            | byLeft a => h a
            | byRight p => rewriteI p n
          })
          | InotPsi => proofIsEntails decidable h2 I (\case __ \with {
            | byLeft a => h a
            | byRight p => rewriteI p n
          })
        \in absurd (InotPsi Ipsi)
    }
    | equal x y, E-Refl idp => \lam I h => idp
    | to, E-Subst t t' e phi h idp => \lam I h1 =>
        \let
          | p => h1 e
          | IphiT => proofIsEntails decidable h I h1
        \in subModel IphiT p
    | impH x to, impIntro h => \lam I mf mx => proofIsEntails decidable h I (\case __ \with {
      | byLeft a => mf a
      | byRight b => rewriteI b mx
    })
    | impH x to, impIntro' h => \lam I mf mx => absurd (proofIsEntails decidable h I mf mx)
    | toShow, impElim x y el h1 h2 => \lam I h => \case decidable I x \with {
      | yes Ix => proofIsEntails decidable h2 I (\case __ \with {
        | byLeft inFrom => h inFrom
        | byRight =y => rewriteI =y $ h el Ix
      })
      | no Inx => proofIsEntails decidable h1 I (\case __ \with {
        | byLeft inFrom => h inFrom
        | byRight =nx => rewriteI =nx $ Inx
      })
    }

  \func subModel {L : Language} {I : Interpretation 0} {phi : Formula 1} {t t' : Term 0}
                 (h : I ⊧ sub phi t) (e : evaluate I t = evaluate I t')
    : I ⊧ sub phi t' => substModel phi (\lam {f : Fin 1} f1 => \case \elim f \with {
    | zero => e
  }) h
    \where {
      \func substModel {L : Language} {n m : Nat} {I : Interpretation m} (phi : Formula n)
                       {s s' : Subst n m} (freeSame : \Pi {f : Fin n} (Formula.FreeVar phi f) -> evaluate I (s f) = evaluate I (s' f))
                       (h : I ⊧ subst s phi)
        : I ⊧ subst s' phi
      \elim phi
        | equal x y => evalSubst x (\lam fr => inv (freeSame (byLeft fr))) *> h *> evalSubst y (\lam fr => freeSame (byRight fr))
        | atomic r d => transport (Semantics.rel {I.1} r)
            (ext (ext (\lam j => rewriteF (inv $ subTermsAt j, inv $ subTermsAt j) (evalSubst (d j) (\lam {k} free => freeSame $ inP (j, free))))))
            h
        | impH x phi => \lam mo =>
            \let xs : I ⊧ subst s x => substModel x (\lam fr => inv (freeSame (byLeft fr))) mo
            \in substModel phi (\lam fr => freeSame (byRight fr)) (h xs)
        | notH phi => \lam mo => h (substModel phi (\lam fr => inv (freeSame fr)) mo)
        | forallH phi => \lam x => substModel
            phi
            {extends s}
            (\lam {k} free => \case \elim k, free \with {
              | 0, free => idp
              | suc k, free => \let fs => freeSame free \in unfold extends (subOneRename (s k) *> fs *> inv (subOneRename (s' k)))
            })
            (h x)

      \func evalSubst {L : Language} {n m : Nat} {I : Interpretation m} (t : Term n)
                      {s s' : Subst n m} (h : \Pi {f : Fin n} (Term.FreeVar t f) -> evaluate I (s f) = evaluate I (s' f))
        : evaluate I (subTerm s t) = evaluate I (subTerm s' t)
      \elim t
        | var f => h idp
        | apply f d => pmap (Semantics.funcs {I.1} f)
            (ext (ext (\lam j =>
                \let h' => evalSubst (d j) (\lam {k} free => h $ inP (j, free))
                \in rewriteF (inv $ subTermsAt j, inv $ subTermsAt j) h')))
    }

  \func sequentProofUsesFiniteAxioms {L : DecLanguage} {axioms : DecElementEnsemble (Formula 0)} {f : Formula 0}
                                     (h : axioms ⊢ f) : \Sigma (reducedAxioms : DecSizedEnsemble (Formula 0)) (reducedAxioms.S ⊆ axioms) (reducedAxioms ⊢ f)
  \elim f, h
    | f, Ass e => (DecSizedEnsemble.fromSizedEnsemble $ SizedEnsemble.singleSized f, ⊆.singleSubset e, Ass idp)
    | equal x y, E-Refl p => (DecSizedEnsemble.fromSizedEnsemble $ SizedEnsemble.emptySized, ⊆.∅-is-⊆, E-Refl p)
    | f, PC psi h1 h2 =>
      \let
        | (ax1 : DecSizedEnsemble, sax1, pax1) => sequentProofUsesFiniteAxioms {_} {axioms.addElement psi} h1
        | (ax2 : DecSizedEnsemble, sax2, pax2) => sequentProofUsesFiniteAxioms {_} {axioms.addElement (notH psi)} h2
        -- we need to remove psi from ax1 (if it has it) unless it was already present in axioms
      \in \case axioms.decElement psi, ax1.decElement psi, axioms.decElement (notH psi), ax2.decElement (notH psi) \with {
        -- psi is already in axioms, we can cut the tree to that branch of PC
        | yes e, _, _, _ => (ax1, ⊆.trans sax1 (⊆.unionSubset ⊆.refl (⊆.singleSubset e)), pax1)
        -- same thing for notH psi
        | _, _, yes e, _ => (ax2, ⊆.trans sax2 (⊆.unionSubset ⊆.refl (⊆.singleSubset e)), pax2)
        -- psi and notH psi need to be removed
        | no n, yes psiIn, no n1, yes nPsiIn =>
          \let
            | ax1' : DecSizedEnsemble => ax1.removeSized psiIn
            | ax2' : DecSizedEnsemble => ax2.removeSized nPsiIn
            | axioms' => ax1'.unionSized ax2'
            | ax1sub : ax1.S ⊆ add axioms' psi => \lam {x} e => \case decideEq psi x \with {
              | yes e1 => byRight e1
              | no n2 => byLeft (byLeft (e, n2))
            }
            | ax2sub : ax2.S ⊆ add axioms' (notH psi) => \lam {x} e => \case decideEq (notH psi) x \with {
              | yes e1 => byRight e1
              | no n2 => byLeft (byRight (e, n2))
            }
          \in (axioms', ⊆.unionSubset (⊆.removeAdd sax1) (⊆.removeAdd sax2),
               PC psi (weaken pax1 ax1sub) (weaken pax2 ax2sub)
          )

        -- only psi needs to be removed
        | no n, yes psiIn, no n1, no n2 =>
          \let
            | ax1' : DecSizedEnsemble => ax1.removeSized psiIn
            | axioms' => ax1'.unionSized ax2
            | sax2' : ax2.S ⊆ axioms => rewrite (remove.alreadyGone n2) $ ⊆.removeAdd sax2
            | ax1sub : ax1.S ⊆ add axioms' psi => \lam {x} e => \case decideEq psi x \with {
              | yes e1 => byRight e1
              | no n2 => byLeft (byLeft (e, n2))
            }
            | ax2sub : ax2.S ⊆ add axioms' (notH psi) => \lam {x} e => byLeft (byRight e)
          \in (axioms', ⊆.unionSubset (⊆.removeAdd sax1) sax2', PC psi (weaken pax1 ax1sub) (weaken pax2 ax2sub))

        -- only notH psi needs to be removed
        | no n, no n1, no n2, yes nPsiIn =>
          \let
            | ax2' : DecSizedEnsemble => ax2.removeSized nPsiIn
            | axioms' => ax1.unionSized ax2'
            | sax1' : ax1.S ⊆ axioms => rewrite (remove.alreadyGone n1) $ ⊆.removeAdd sax1
            | ax1sub : ax1.S ⊆ add axioms' psi => \lam {x} e => \case decideEq psi x \with {
              | yes e1 => byRight e1
              | no n2 => byLeft (byLeft e)
            }
            | ax2sub : ax2.S ⊆ add axioms' (notH psi) => \lam {x} e => \case decideEq (notH psi) x \with {
              | yes e1 => byRight e1
              | no n2 => byLeft (byRight (e, n2))
            }
          \in (axioms', ⊆.unionSubset sax1' (⊆.removeAdd sax2),
               PC psi (weaken pax1 ax1sub) (weaken pax2 ax2sub)
          )
        -- we don't need to remove anything
        | no n, no n1, no n2, no n3 =>
          \let
            | ax1sub : ax1.S ⊆ axioms => rewrite (remove.alreadyGone n1) (⊆.removeAdd sax1)
            | ax2sub : ax2.S ⊆ axioms => rewrite (remove.alreadyGone n3) (⊆.removeAdd sax2)
          \in (ax1.unionSized ax2, ⊆.unionSubset ax1sub ax2sub, PC psi (weaken pax1 (byLeft $ byLeft __)) (weaken pax2 (byLeft $ byRight __)))
      }

    | f, Ctr psi h1 h2 =>
      \let
        | (ax1 : DecSizedEnsemble, sax1, pax1) => sequentProofUsesFiniteAxioms {_} {axioms.addElement (notH f)} h1
        | (ax2 : DecSizedEnsemble, sax2, pax2) => sequentProofUsesFiniteAxioms {_} {axioms.addElement (notH f)} h2
      \in \case axioms.decElement (notH f), ax1.decElement (notH f), ax2.decElement (notH f) \with {
        | yes e, _, _ => (ax1.unionSized ax2,
                          ⊆.unionSubset
                              (⊆.trans sax1 (⊆.unionSubset ⊆.refl (\lam {x} x=notH => transport (__ ∈ axioms.S) x=notH e)))
                              (⊆.trans sax2 (⊆.unionSubset ⊆.refl (\lam {x} x=notH => transport (__ ∈ axioms.S) x=notH e))),
                          Ctr psi (weaken pax1 (\lam z => byLeft (byLeft z))) (weaken pax2 (\lam z => byLeft (byRight z))))
        | no n, yes e, yes e1 =>
          \let
            | ax1' : DecSizedEnsemble => ax1.removeSized e
            | ax2' : DecSizedEnsemble => ax2.removeSized e1
            | axioms' => ax1'.unionSized ax2'
            | ax1sub : ax1.S ⊆ add axioms' (notH f) => \lam {x} e => \case decideEq (notH f) x \with {
              | yes e1 => byRight e1
              | no n2 => byLeft (byLeft (e, n2))
            }
            | ax2sub : ax2.S ⊆ add axioms' (notH f) => \lam {x} e => \case decideEq (notH f) x \with {
              | yes e1 => byRight e1
              | no n2 => byLeft (byRight (e, n2))
            }
          \in (axioms', ⊆.unionSubset (⊆.removeAdd sax1) (⊆.removeAdd sax2),
               Ctr psi (weaken pax1 ax1sub) (weaken pax2 ax2sub)
          )
        | no n, yes e, no n1 =>
          \let
            | ax1' : DecSizedEnsemble => ax1.removeSized e
            | axioms' => ax1'.unionSized ax2
            | sax2' : ax2.S ⊆ axioms => rewrite (remove.alreadyGone n1) $ ⊆.removeAdd sax2
            | ax1sub : ax1.S ⊆ add axioms' (notH f) => \lam {x} e => \case decideEq (notH f) x \with {
              | yes e1 => byRight e1
              | no n2 => byLeft (byLeft (e, n2))
            }
            | ax2sub : ax2.S ⊆ add axioms' (notH f) => \lam z => byLeft (byRight z)
          \in (axioms', ⊆.unionSubset (⊆.removeAdd sax1) sax2',
               Ctr psi (weaken pax1 ax1sub) (weaken pax2 ax2sub))
        | no n, no n1, yes e =>
          \let
            | ax2' : DecSizedEnsemble => ax2.removeSized e
            | axioms' => ax1.unionSized ax2'
            | sax1' : ax1.S ⊆ axioms => rewrite (remove.alreadyGone n1) $ ⊆.removeAdd sax1
            | ax1sub : ax1.S ⊆ add axioms' (notH f) => \lam z => byLeft (byLeft z)
            | ax2sub : ax2.S ⊆ add axioms' (notH f) => \lam {x} e => \case decideEq (notH f) x \with {
              | yes e1 => byRight e1
              | no n2 => byLeft (byRight (e, n2))
            }
          \in (axioms', ⊆.unionSubset sax1' (⊆.removeAdd sax2),
               Ctr psi (weaken pax1 ax1sub) (weaken pax2 ax2sub))
        | no n, no n1, no n2 =>
          \let
            | axioms' => ax1.unionSized ax2
            | sax1' : ax1.S ⊆ axioms => rewrite (remove.alreadyGone n1) $ ⊆.removeAdd sax1
            | sax2' : ax2.S ⊆ axioms => rewrite (remove.alreadyGone n2) $ ⊆.removeAdd sax2
            | ax1sub : ax1.S ⊆ add axioms' (notH f) => \lam z => byLeft (byLeft z)
            | ax2sub : ax2.S ⊆ add axioms' (notH f) => \lam z => byLeft (byRight z)
          \in (axioms', ⊆.unionSubset sax1' sax2',
               Ctr psi (weaken pax1 ax1sub) (weaken pax2 ax2sub))
      }
    | f, E-Subst t t' e phi h p =>
      \let
        | (ax : DecSizedEnsemble, sax, pax) => sequentProofUsesFiniteAxioms h
      \in (ax.addSized' (equal t t'),
           \case \elim __ \with {
             | byLeft z => sax z
             | byRight z => transport (__ ∈ axioms) z e
           },
           E-Subst t t' (byRight idp) phi (weaken pax (byLeft __)) p)
    | impH x f, impIntro h =>
      \let (ax : DecSizedEnsemble, sax, pax) => sequentProofUsesFiniteAxioms {_} {axioms.addElement x} h
      \in \case axioms.decElement x, ax.decElement x \with {
        | yes e, _ => (ax, ⊆.trans sax (⊆.unionSubset ⊆.refl (⊆.singleSubset e)), impIntro (weaken pax (byLeft __)))
        | no n, yes e => (ax.removeSized e, ⊆.removeAdd sax, impIntro (rewriteI (remove.addBack e _) pax))
        | no n, no n1 => (ax, \lam {y} e => \case sax e \with {
          | byLeft a => a
          | byRight b => absurd (n1 (rewrite b e))
        }, impIntro (weaken pax (byLeft __)))
      }
    | impH x f, impIntro' h => \let (ax, sax, pax) => sequentProofUsesFiniteAxioms h \in (ax, sax, impIntro' pax)
    | toShow, impElim phi psi impIn h1 h2 =>
      -- phi -> psi
      -- A, n phi |- S
      -- A, psi |- S
      -- ----------------
      -- A |- S

      \let
        | addAxiomsNot : DecElementEnsemble (Formula 0) => \new DecElementEnsemble {
          | E => Formula 0
          | S => add axioms (notH phi)
          | decElement x => \case axioms.decElement x, decideEq {FormulaDec} (notH phi) x \with {
            | yes e1, _ => yes (byLeft e1)
            | _, yes e1 => yes (byRight e1)
            | no n, no n1 => no (\case __ \with {
              | byLeft a => n a
              | byRight b => n1 b
            })
          }
        }
        | addAxioms : DecElementEnsemble (Formula 0) => \new DecElementEnsemble {
          | E => Formula 0
          | S => add axioms psi
          | decElement x => \case axioms.decElement x, decideEq {FormulaDec} psi x \with {
            | yes e1, _ => yes (byLeft e1)
            | _, yes e1 => yes (byRight e1)
            | no n, no n1 => no (\case __ \with {
              | byLeft a => n a
              | byRight b => n1 b
            })
          }
        }

        | (h1axioms : DecSizedEnsemble, h1subset, h1Proof) => sequentProofUsesFiniteAxioms {_} {addAxiomsNot} h1
        | (h2axioms : DecSizedEnsemble, h2subset, h2Proof) => sequentProofUsesFiniteAxioms {_} {addAxioms} h2
        | h1Pure : DecSizedEnsemble => h1axioms.removeSized' (notH phi)
        | h2Pure : DecSizedEnsemble => h2axioms.removeSized' psi
        | unionAxioms : DecSizedEnsemble => h1Pure.unionSized h2Pure
        | withAdded : DecSizedEnsemble => unionAxioms.addSized' (phi impH psi)
      \in \case axioms.decElement psi \with {
        | yes psiIn =>
          -- then h2 is sufficient
          (h2axioms, ⊆.trans h2subset (⊆.unionSubset ⊆.refl (⊆.singleSubset psiIn)), h2Proof)

        -- then we need to remove psi from the union
        | no psiNotIn => \case axioms.decElement (notH phi) \with {
          | yes nPhiIn =>
            -- then h1 is sufficient
            (h1axioms, ⊆.trans h1subset (⊆.unionSubset ⊆.refl (⊆.singleSubset nPhiIn)), h1Proof)

          | no nPhiNotIn =>
            -- we need to craft a finite implemtation of impElim (union of h1 and h2 minus psi / not phi and keep (psi -> phi))
            (withAdded,
             ⊆.unionSubset (⊆.unionSubset (⊆.removeAdd h1subset) (⊆.removeAdd h2subset)) (⊆.singleSubset impIn),
             impElim phi psi (byRight idp)
                 (weaken h1Proof (\lam {x} e => \case decideEq (notH phi) x \with {
                   | yes x=notPhi => byRight x=notPhi
                   | no x/=notPhi => byLeft (byLeft (byLeft (e, x/=notPhi)))
                 }))
                 (weaken h2Proof (\lam {x} e => \case decideEq psi x \with {
                   | yes x=psi => byRight x=psi
                   | no x/=psi => byLeft (byLeft (byRight (e, x/=psi)))
                 })))
        }
      }

  \class TermCongruence {L : Language} {n : Nat} (axioms : Ensemble (Formula n)) \extends Equivalence
    | A => Term n
    | fCong (f : Functions)
            (d : Array (Term n) (functionArity f))
            (d' : Array (Term n) (functionArity f))
            (d~d' : \Pi (i : Fin (functionArity f)) -> d i ~ d' i) : apply f d ~ apply f d'
    | relCong  (r : Relations)
               (d : Array (Term n) (relationsArity r))
               (d' : Array (Term n) (relationsArity r))
               (d~d' : \Pi (i : Fin (relationsArity r)) -> d i ~ d' i)
               (h : axioms ⊢ atomic r d) : axioms ⊢ atomic r d'

  \func T~ {L : Language} {n : Nat} (axioms : Ensemble (Formula n)) : TermCongruence \cowith
    | L => L
    | n => n
    | axioms => axioms
    | ~ x y => TruncP (axioms ⊢ equal x y)
    | ~-reflexive => inP (E-Refl idp)
    | ~-symmetric {x} {y} (inP h) => inP (⊢.E-Symm h)
    | ~-transitive {x} {y} {z} (inP h) (inP h') => inP (⊢.E-Trans h h')
    | fCong f d d' d~d' => {?}
    | relCong r d d' d~d' h => {?}

  \func TermInterpretation {L : Language} {n : Nat} (axioms : Ensemble (Formula n)) : Interpretation n =>
    (\new Semantics.Structure {
       | Universe => Quotient {Term n} (~ {T~ axioms})
       | rel => relInterpretation axioms
       | funcs f d => {?}
     },
     \lam f => in~ (var f))
    \where {
      \func relInterpretation {L : Language} {n : Nat} (axioms : Ensemble (Formula n)) (r : Relations) (d : Array (Quotient {Term n} (~ {T~ axioms})) (relationsArity r)) : \Prop =>
        {?}

      \func termInterpretationIsQuotient {L : Language} {axioms : Ensemble (Formula 0)} {t : Term 0}
        : evaluate (TermInterpretation axioms) t = in~ t \elim t
        | var f => idp
        | apply f d => {?}
    }
}