\import Data.Fin
\import Data.Or
\import Function.Meta
\import Logic
\import Paths
\import Paths.Meta
\import Relation.Equivalence
\import Util
\import lambda.GeneralContext
\import logik.fol.FOL
\import logik.fol.SequentCalculus
\import logik.fol.Substitution
\import sets.MySet
\import util.ArrayUtils
\open SequentCalulus (⊢)
\open Nat (+)

\class TermCongruence {L : Language} {c : TermContext} {axioms : Ensemble (Formula c)} \extends Equivalence
  | A => Term c
  | fCong (f : Functions)
          (d : Array (Term c) (functionArity f))
          (d' : Array (Term c) (functionArity f))
          (d~d' : \Pi (i : Fin (functionArity f)) -> d i ~ d' i) : apply f d ~ apply f d'
  | relCong  (r : Relations)
             (d : Array (Term c) (relationsArity r))
             (d' : Array (Term c) (relationsArity r))
             (d~d' : \Pi (i : Fin (relationsArity r)) -> d i ~ d' i)
             (h : axioms ⊢ atomic r d) : axioms ⊢ atomic r d'

\func T~ {L : Language} {c : TermContext} (axioms : Ensemble (Formula c)) : TermCongruence \cowith
  | L => L
  | c => c
  | axioms => axioms
  | ~ x y => TruncP (axioms ⊢ equal x y)
  | ~-reflexive => inP (SequentCalulus.E-Refl idp)
  | ~-symmetric {x} {y} (inP h) => inP (⊢.E-Symm h)
  | ~-transitive {x} {y} {z} (inP h) (inP h') => inP (⊢.E-Trans h h')
  | fCong f d d' d~d' => \case truncMap d~d' \with {
    | inP f_d~d' => inP $ ⊢.E-Sub'
                              (subN.extendsN {FOLTermSub} {_} {ArrayUtils.arrayOf' ()} d)
                              (subN.extendsN {FOLTermSub} {_} {ArrayUtils.arrayOf' ()} d')
                              (\lam i => equalExtendsN f_d~d' i)
                              (equal (apply f (\lam i => Term.liftN (d i))) (apply f arrayOfVars))
                              {?}
                              {?}
--    ⊢.E-Sub' (extendsN' d) (extendsN' d')
--        (\lam i => equalExtendsN' f_d~d' i)
--        (equal (apply f (liftsN _ d)) (apply f arrayOfVars))
--        (SequentCalulus.E-Refl (pmap (apply f) (ext (ext (\lam j =>
--            Formula.subTermsAt j *>
--            extendLift *>
--            inv subArrayOfVarsAt *>
--            inv (Formula.subTermsAt j)
--        )))))
--        (pmap2 (\lam (x1 x2 : Array (Term n) (L.functionArity f)) => equal (apply f x1) (apply f x2))
--            {?}
--            {?})
  }
  | relCong r d d' d~d' h => {?}
  \where {
    \func arrayOfVars {L : Language} {c : TermContext} {length : Nat} : Array (Term {L} (c Context.∕∕ ArrayUtils.arrayOf () {length})) length =>
      \lam i => \let i' : Fin (Context.length c + length) => finExpandLeft i
                \in var (∋.fromIndexFin $ rewrite Context.length-∕∕ i')

    \func equalExtendsN {L : Language} {c : TermContext} {axioms : Ensemble (Formula c)}
                        {l : Nat} {d d' : Array (Term c) l}
                        (de : \Pi (i : Fin l) -> axioms ⊢ equal (d i) (d' i))
                        (i : c Context.∕∕ ArrayUtils.arrayOf () {l} ∋ ())
      : axioms ⊢ equal (subN.extendsN {FOLTermSub} d i) (subN.extendsN {FOLTermSub} d' i)
    \elim l, i
      | 0, i => ⊢.E-Refl idp
      | suc l, Z p => de 0
      | suc l, S i => equalExtendsN (\lam j => de (fsuc j)) i
    --      | 0, i => SequentCalulus.E-Refl idp
--      | suc l, 0 => de 0
--      | suc l, suc i => equalExtendsN {L} {n} {axioms} {l} {\lam f => d (suc f)} {\lam f => d' (suc f)} (\lam f => de (suc f)) i
--
--    \func subArrayOfVarsAt {L : Language} {n l : Nat} {d : Array (Term n) l} {j : Fin l}
--      : Formula.subTerm (extendsN' d) (arrayOfVars j) = d j \elim l, d, j
--      | suc l, _, 0 => idp
--      | suc l, _ :: d, suc j => subArrayOfVarsAt
--
--    \func subArrayOfVars {L : Language} {n l : Nat} {d : Array (Term n) l}
--      : Formula.subTerms (extendsN' d) arrayOfVars = {Array (Term n) l} d => ext (ext (\lam j =>
--        Formula.subTermsAt j *> {?}
--    ))
--
--    \func extendLift {L : Language} {n l : Nat} {d : Array (Term n) l} {j : Fin l}
--      : Formula.subTerm (extendsN' d) (Term.liftN l (d j)) = d j => extendsN'.subExtendsLifts
  }