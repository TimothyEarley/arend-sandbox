\import Algebra.Domain.Euclidean
\import Arith.Nat
\import Data.Array
\import Data.List (List)
\import Data.Or
\import Function
\import Function.Meta ($)
\import LeipnizEquality
\import Logic
\import Logic.Meta
\import Meta
\import Order.Lattice
\import Order.PartialOrder
\import Paths
\import Paths.Meta
\import Set
\import Set.Fin
\import Util
\import logik.fol.Semantics
\import sets.MySet
\import sets.finite.Sized
\import sets.subset
\import util.ArrayUtils
\import util.CantorPair
\open Formula (subTerm)
\open NatSemiring (+-assoc, +-comm)
\open IntEuclidean (natMod<right)
\open Semantics (Interpretation, ≡, ⊧, ⊭)
\open LeipnizIsEqual (j)
\open Term (lift, liftN, lifts)

-- http://r6.ca/Goedel/goedel1.html

\class Language
  | Relations : \Set
  | relationsArity : Relations -> Nat
  | Functions : \Set
  | functionArity : Functions -> Nat

\class DecLanguage \extends Language
  | decRelations : DecSet Relations
  | decFunctions : DecSet Functions

\data Term {L : Language} (variables : Nat) : \Set
  | var (Fin variables)
  | apply (f : L.Functions) (Array (Term {L} variables) (functionArity f))

  \where {
    \func FreeVar {L : Language} {n : Nat} (t : Term n) (i : Fin n) : \Prop
    \elim t
      | var f => f = i
      | apply f d => AnyFreeVar d i

    \func AnyFreeVar {L : Language} {n : Nat} (ts : Array (Term n)) (i : Fin n) : \Prop =>
      ∃ (j : Fin ts.len) (FreeVar (ts j) i)

    \func termDepth {L : Language} {n : Nat} (t : Term n) : Nat \elim t
      | var f => 0
      | apply f d => suc (maxTermDepth d)
      \where {
        \func maxTermDepth {L : Language} {n : Nat} (ts : Array (Term n)) : Nat \elim ts
          | nil => 0
          | :: a arr => (termDepth a) ∨ (maxTermDepth arr)

        \lemma maxTermDepthIsBigger {L : Language} {n : Nat} {ts : Array (Term n)} {j : Fin ts.len} : termDepth (ts j) <= maxTermDepth ts
        \elim ts, j
          | :: a arr, 0 => join-left
          | :: a arr, suc j => <=-transitive maxTermDepthIsBigger join-right
      }

    \func lift {L : Language} {n : Nat} (t : Term n) : Term (suc n) \elim t
      | var f => var (suc f)
      | apply f d => apply f (lifts d)

    \func lifts {L : Language} {n l : Nat} (t : Array (Term n) l) : Array (Term (suc n)) l \elim l, t
      | 0, nil => nil
      | suc l, :: a arr => (lift a) :: (lifts arr)

    \func liftN {L : Language} {n : Nat} (k : Nat) (t : Term n) : Term (n Nat.+ k) \elim k
      | 0 => t
      | suc k => lift (liftN k t)

    \func liftNL {L : Language} {n : Nat} (k : Nat) (t : Term n) : Term (k Nat.+ n) \elim k
      | 0 => t
      | suc k => lift (liftNL k t)

    \func liftsN  {L : Language} {n l : Nat} (k : Nat) (t : Array (Term n) l) : Array (Term (n Nat.+ k)) l \elim l, t
      | 0, nil => nil
      | suc l, :: a t => (liftN k a) :: (liftsN k t)
  }

\data Formula {L : Language} (variables : Nat) : \Set
  | equal (x y : Term {L} variables)
  | atomic (r : L.Relations) (Array (Term {L} variables) (L.relationsArity r))
  | \infixl 6 impH (x y : Formula {L} variables)
  | notH (x : Formula {L} variables)
  | forallH (x : Formula {L} (suc variables))
  \where {
    \func Rename (x y : Nat) => Fin x -> Fin y

    \func Subst {L : Language} (x y : Nat) => Fin x -> Term {L} y

    \func subTerm {L : Language} {n m : Nat} (s : Subst {L} n m) (t : Term {L} n) : Term {L} m
    \elim t
      | var f => s f
      | apply f d => apply f (subTerms s d)
      \where {
        \func subTermId {L : Language} {n : Nat} (t : Term n) : subTerm var t = t \elim t
          | var f => idp
          | apply f d => pmap (apply f) (subTerms.subTermsId d)
      }

    \func subTerms {L : Language} {n m l : Nat} (s : Subst {L} n m) (d : Array (Term {L} n) l) : Array (Term {L} m) l
    \elim l, d
      | 0, nil => nil
      | suc l, :: a d => (subTerm s a) :: subTerms s d
      \where {
        \func subTermsId {L : Language} {n l : Nat} (d : Array (Term {L} n) l) : subTerms var d = {Array (Term n) l} d \elim l, d
          | 0, nil => idp {Array (Term n) 0}
          | suc l, :: a d => pmap2 {Term n} {Array (Term n) l} {Array (Term n) (suc l)} (::) (subTerm.subTermId a) (subTermsId d)
      }

    \func subTermsAt  {L : Language} {n m l : Nat} {s : Subst {L} n m} {d : Array (Term {L} n) l} (j : Fin l) : subTerms s d j = subTerm s (d j)
    \elim l, d, j
      | suc l, :: a d, 0 => idp
      | suc l, :: a d, suc j => subTermsAt j

    \func subTermLift {L : Language} {n : Nat} {x : Term n}
                      (s : Subst (suc n) n)
                      (h : \Pi (f : Fin n) -> s (suc f) = var f)
      : subTerm s (Term.lift x) = x \elim x
      | var f => h f
      | apply f d => pmap (apply f) (subTermsLift {_} {_} {functionArity f} h)

    \func subTermsLift {L : Language} {n l : Nat} {x : Array (Term n) l}
                       {s : Subst (suc n) n}
                       (h : \Pi (f : Fin n) -> s (suc f) = var f)
      : subTerms s (lifts x) = {Array (Term n) l} x \elim l, x
      | 0, nil => path (\lam i => nil)
      | suc l, :: a x => path (\lam i => ((subTermLift s h) @ i) :: (subTermsLift h) @ i)

    \func rename {L : Language} {x y : Nat} (r : Rename x y) (t : Term {L} x) : Term {L} y
    \elim t
      | var f => var (r f)
      | apply f d => apply f (renames r d)

    \func renames {L : Language} {x y l : Nat} (r : Rename x y) (t : Array (Term {L} x) l) : Array (Term {L} y) l
    \elim l, t
      | 0, nil => nil
      | suc l, :: a t => (rename r a) :: renames r t

    \func renamesAt {L : Language} {x y l : Nat} {r : Rename x y} {t : Array (Term x) l} (j : Fin l)
      : renames r t j = rename r (t j)
    \elim l, t, j
      | suc l, :: a t, 0 => idp
      | suc l, :: a t, suc j => renamesAt j

    \func extends {L : Language} {n m : Nat} (s : Subst {L} n m) : Subst (suc n) (suc m) => \case __ \with {
      | 0 => var 0
      | suc f => rename fsuc (s f)
    }

    \func extendsN {L : Language} {n m k : Nat} (s : Subst n m) : Subst (n Nat.+ k) (m Nat.+ k) \elim k
      | 0 => s
      | suc k => extends (extendsN s)

    \func subst {L : Language} {n m : Nat} (s : Subst {L} n m) (f : Formula {L} n) : Formula {L} m
    \elim f
      | equal x y => equal (subTerm {L} s x) (subTerm {L} s y)
      | atomic r d => atomic r (subTerms {L} s d)
      | impH x f => impH (subst {L} s x) (subst {L} s f)
      | notH f => notH (subst {L} s f)
      | forallH f => forallH (subst (extends s) f)
      \where {
        \func substId {L : Language} {n : Nat} (f : Formula n) : subst var f = f \elim f
          | equal x y => pmap2 equal (subTerm.subTermId x) (subTerm.subTermId y)
          | atomic r d => pmap (atomic r) (subTerms.subTermsId d)
          | impH x f => pmap2 (impH) (substId x) (substId f)
          | notH f => pmap (notH) (substId f)
          | forallH f => pmap forallH (\let goal : subst (extends var) f = f => rewrite extendsVarIsVar (substId f) \in goal)

        \func extendsVarIsVar {L : Language} {n : Nat} : extends var = {Subst (suc n) (suc n)} var =>
          ext (\case \elim  __ \with {
            | 0 => idp
            | suc f => idp
          })
      }

    \func sub {L : Language} {n : Nat} (f : Formula {L} (suc n)) (with : Term {L} n) : Formula n =>
      subst (substFunction with) f
      \where {
        \func substFunction {L : Language} {n : Nat} (with : Term n) : Subst (suc n) n => \case __ \with {
          | 0 => with
          | suc f => var f
        }
      }

    \func subN' {L : Language} {n : Nat} (f : Formula n) (with : Array (Term 0) n) : Formula 0
      => subN f with

    \func subN {L : Language} {n m : Nat} (f : Formula (n Nat.+ m)) (with : Array (Term n) m) : Formula n
      => subst (substFunction with) f
    \where {
      \func substFunction {L : Language} {n m : Nat} (with : Array (Term n) m) (i : Fin (n Nat.+ m)) : Term n
        \elim m, with, i
          | 0, nil, i => var i
          | suc m, :: a with, 0 => a
          | suc m, :: a with, suc i => substFunction with i

      \func recurseSub  {L : Language} {n m : Nat} {f : Formula (suc (n Nat.+ m))}
                        {t : Term n} {d : Array (Term n) m}
        : subN f (t :: d) = subN (sub f (liftN _ t)) d
        => unfold (subN) {?}
    }

    \func FreeVar {L : Language} {n : Nat} (f : Formula n) (i : Fin n) : \Prop \elim f
      | equal x y => (Term.FreeVar x i) || (Term.FreeVar y i)
      | atomic r d => Term.AnyFreeVar d i
      | impH x f => (FreeVar x i) || (FreeVar f i)
      | notH f => FreeVar f i
      | forallH f => FreeVar f (suc i)

    \func lift {L : Language} {n : Nat} (f : Formula n) : Formula (suc n) \elim f
      | equal x y => equal (Term.lift x) (Term.lift y)
      | atomic r d => atomic r (Term.lifts d)
      | impH x f => (lift x) impH (lift f)
      | notH f => notH (lift f)
      | forallH f => forallH (lift f) -- TODO this is wrong
  }

-- x --> y = y or not x

\cons \infix 6 orH {L : Language} {n : Nat} (x y : Formula {L} n) : Formula {L} n
=> notH x impH y
  \where {
    \lemma or1 {L : Language} {n : Nat} {x y : Formula {L} n} {I : Interpretation n} (h : I ⊧ x) : I ⊧ x orH y =>
      \lam m => absurd (m h)

    \lemma or2 {L : Language} {n : Nat} {x y : Formula {L} n} {I : Interpretation n} (h : I ⊧ y) : I ⊧ x orH y =>
      \lam m => h

    \lemma or3 {L : Language} {n : Nat} {x y : Formula {L} n} {I : Interpretation n} (h : I ⊭ x) (h' : I ⊭ y) : I ⊭ x orH y =>
      \lam m => h' (m h)
  }

\cons \infix 6 andH {L : Language} {n : Nat} (x y : Formula {L} n) : Formula {L} n
=> notH (notH x orH notH y)
  \where {
    \lemma and1  {L : Language} {n : Nat} {x y : Formula {L} n} {I : Interpretation n} (h : I ⊧ x) (h' : I ⊧ y) : I ⊧ x andH y =>
      \lam m => m (__ h) h'

    \lemma and2  {L : Language} {n : Nat} {x y : Formula {L} n} {I : Interpretation n} (h : I ⊭ x) : I ⊭ x andH y =>
      \lam m => m (\lam m1 m2 => m1 (\lam m3 => h m3))

    \lemma and3  {L : Language} {n : Nat} {x y : Formula {L} n} {I : Interpretation n} (h : I ⊭ y) : I ⊭ x andH y =>
      \lam m => m (\lam m1 m2 => h m2)
  }

\func \infix 7 <->H {L : Language} {n : Nat} (x y : Formula n) : Formula n
  => (x impH y) andH (y impH x)

\func System {L : Language} => Ensemble (Formula {L} 0)

