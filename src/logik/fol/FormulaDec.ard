\import Logic
\import LogicUtil
\import Paths
\import Paths.Meta
\import Set
\import identity.DecMaps
\import identity.Identity
\import logik.fol.FOL
\import logik.fol.TermDec
\open TermDec (terms-decide)

\instance FormulaDec {L : DecLanguage} {n : Nat} : Identity.Decidable (Formula n)
  | Code => Code
  | code-refl => code-refl
  | code-decode => code-decode
  | code-decide => code-decide
\where {
  \func Code {L : Language} {n : Nat} (x y : Formula n) : \Prop \elim x, y
    | equal x y, equal x1 y1 => \Sigma (x = x1) (y = y1)
    | atomic r d, atomic r1 d1 => \Sigma (r = r1) (d = d1) -- (r, d) = {\Sigma (r : L.Relations) (Array (Term n) (L.relationsArity r))} (r1, d1)
    | notH x, notH y => Code x y
    | impH x x1, impH x2 y => \Sigma (Code x x2) (Code x1 y)
    | forallH x, forallH y => Code x y
    | equal x y, atomic r d => Empty
    | equal x y, impH x1 y1 => Empty
    | equal x y, notH y1 => Empty
    | equal x y, forallH y1 => Empty
    | atomic r d, equal x y => Empty
    | atomic r d, impH x y => Empty
    | atomic r d, notH y => Empty
    | atomic r d, forallH y => Empty
    | impH x x1, equal x2 y => Empty
    | impH x x1, atomic r d => Empty
    | impH x x1, notH y => Empty
    | impH x x1, forallH y => Empty
    | notH x, equal x1 y => Empty
    | notH x, atomic r d => Empty
    | notH x, impH x1 y => Empty
    | notH x, forallH y => Empty
    | forallH x, equal x1 y => Empty
    | forallH x, atomic r d => Empty
    | forallH x, impH x1 y => Empty
    | forallH x, notH y => Empty

  \func code-refl {L : Language} {n : Nat} (x : Formula n) : Code x x \elim x
    | equal x y => (idp, idp)
    | atomic r d => (idp, idp)
    | impH x x1 => (code-refl x, code-refl x1)
    | notH x => code-refl x
    | forallH x => code-refl x

  \func code-decode {L : Language} {n : Nat} {x y : Formula n} (h : Code x y) : x = y \elim x, y, h
    | equal x y, equal x1 y1, (idp, idp) => idp
    | atomic r d, atomic r1 d1, (idp, idp) => idp
    | impH x x1, impH x2 y, h => pmap2 (impH) (code-decode h.1) (code-decode h.2)
    | notH x, notH y, h => pmap notH (code-decode h)
    | forallH x, forallH y, h => pmap forallH (code-decode h)

  \func code-decide {L : DecLanguage} {n : Nat} (x y : Formula n) : Dec (Code x y) \elim x, y
    | equal x y, equal x1 y1 => decMap2 (TermDec.decideEq x x1) (TermDec.decideEq y y1) <->.refl <->.refl
    | atomic r d, atomic r1 d1 => decMap2 (L.decRelations.decideEq r r1) (terms-decide d d1) <->.refl <->.refl
    | impH x x1, impH x2 y => decMap2 (code-decide x x2) (code-decide x1 y) <->.refl <->.refl
    | forallH x, forallH y => code-decide x y
    | notH x, notH y => code-decide x y
    | impH x x1, notH y => no absurd
    | equal x y, atomic r d => no absurd
    | equal x y, impH x1 y1 => no absurd
    | equal x y, notH y1 => no absurd
    | equal x y, forallH y1 => no absurd
    | atomic r d, equal x y => no absurd
    | atomic r d, impH x y => no absurd
    | atomic r d, notH y => no absurd
    | atomic r d, forallH y => no absurd
    | impH x x1, equal x2 y => no absurd
    | impH x x1, atomic r d => no absurd
    | impH x x1, forallH y => no absurd
    | notH x, equal x1 y => no absurd
    | notH x, atomic r d => no absurd
    | notH x, impH x1 y => no absurd
    | notH x, forallH y => no absurd
    | forallH x, equal x1 y => no absurd
    | forallH x, atomic r d => no absurd
    | forallH x, impH x1 y => no absurd
    | forallH x, notH y => no absurd
}

