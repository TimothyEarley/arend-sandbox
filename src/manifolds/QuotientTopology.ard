\import Function.Meta
\import Logic
\import Logic.Meta
\import Paths
\import Relation.Equivalence
\import manifolds.Topology
\import sets.Family
\import sets.Image
\import sets.MySet
\import sets.union

\func quotientTopology (Top : Topology) (E : Equivalence Top.X) : Topology \cowith
  | X => Quotient {Top.X} (E.~)
  | T U => Top.open $ PreImage U in~
  | totalInT => Top.totalInT
  | intersectionIn A B hA hB => Top.intersectionIn _ _ hA hB
  | unionIn F h =>
    \let
      -- TODO understand why this is so simple (aka what did I actually do here?)
      | unionInTop : ⋃ (Family.ofQuotientUnpack F) ∈ Top.T => Top.unionIn (Family.ofQuotientUnpack F)
          (\lam {_} (inP (a, idp, e : a ∈ F)) => h e)
      | q : ⋃ (\lam b => ∃ (\Sigma (a : Quotient (E.~) -> \Prop) (b = (\lam (x : Top) => in~ x ∈ a)) (a ∈ F)))
        = {Ensemble Top.X}
      (\lam (a : Top) => in~ a ∈ ⋃ F)
      => extSet
            (\lam {x} (inP (_, inP (f, idp, fF), el)) => inP (f, fF, el))
            (\lam {x} (inP (f, fF, inX)) => inP (\lam (x : Top) => in~ x ∈ f, TruncP.inP (f, idp, fF), inX))
      | goal : (\lam a => in~ a ∈ ⋃ F) ∈ Top.T  => transport (__ ∈ Top.T) q unionInTop
    \in goal