\import Logic
\import Logic.Meta
\import Meta
\import Paths
\import Paths.Meta
\import Star
\import simplyTypedLambdaDeBruijne.ExtendedLambda \using (--> \as e-->, Reduces \as Ereduces, app \as e_app, lam \as e_lam, var \as e_var)
\import simplyTypedLambdaDeBruijne.GeneralContext \using (∋ \as ELookup, Z \as EZ, S \as ES, Context \as GeneralContext, ∅ \as ENone, ∕ \as ECons)
\import systemFDeBruijne.Erase
\import systemFDeBruijne.Reduction
\import systemFDeBruijne.SystemF
\import systemFDeBruijne.Type
\import unitypedLambda.Lambda \using (app \as u_app, lam \as u_lam, var \as u_var, * \as u*)

\func embedType (t : ExtendedType) {c : KindContext} : FType c * \elim t
  | e--> A B => (embedType A) --> (embedType B)
  | PNat => ForAllTy * (T0 --> (T0 --> T0) --> T0)
  | ⋇ A B => ForAllTy * (((embedType A) --> (embedType B) --> T0) --> T0)
  | ⊎ A B => ForAllTy * (((embedType A) --> T0) --> ((embedType B) --> T0) --> T0)
  | Unit => ForAllTy * (T0 --> T0)
  | EmptyType => ForAllTy * T0
  | ListOf A => ForAllTy * (T0 --> (embedType A --> T0 --> T0) --> T0)

  \where {
    \func renameEmbed {t : ExtendedType} {kc kc' : KindContext} {h : FType.Rename kc kc'} : FType.rename h (embedType t) = embedType t
    \elim t
      | e--> A B => pmap2 (-->) renameEmbed renameEmbed
      | ExtendedType.PNat => idp
      | ExtendedType.⋇ A B => pmap2 (\lam a b => ForAllTy * ((a --> b --> T0) --> T0)) renameEmbed renameEmbed
      | ExtendedType.⊎ A B => pmap2 (\lam a b => ForAllTy * ((a --> T0) --> (b --> T0) --> T0)) renameEmbed renameEmbed
      | ExtendedType.Unit => idp
      | ExtendedType.EmptyType => idp
      | ExtendedType.ListOf A => pmap (\lam a => ForAllTy * (T0 --> (a --> T0 --> T0) --> T0)) renameEmbed

    \func substEmbed {t : ExtendedType} {kc kc' : KindContext} {s : FType.Subst kc kc'}
      : FType.subst s (embedType t) = embedType t
    \elim t
      | e--> A B => pmap2 (-->) substEmbed substEmbed
      | ExtendedType.PNat => idp
      | ExtendedType.⋇ A B => pmap2 (\lam a b => ForAllTy * ((a --> b --> T0) --> T0)) substEmbed substEmbed
      | ExtendedType.⊎ A B => pmap2 (\lam a b => ForAllTy * ((a --> T0) --> (b --> T0) --> T0)) substEmbed substEmbed
      | ExtendedType.Unit => idp
      | ExtendedType.EmptyType => idp
      | ExtendedType.ListOf A => pmap (\lam a => ForAllTy * (T0 --> (a --> T0 --> T0) --> T0)) substEmbed
  }

\func embedContext (c : ExtendedContext) : Context
\elim c
  | GeneralContext.∅ => ∅
  | GeneralContext.∕ c t => (embedContext c) ∕ (embedType t)

\data IsEmbeddedContext (c : ExtendedContext) {kc : KindContext} (c' : TypeContext kc) : \Set
\elim c, c'
  | c, ConsType c' {K} f => SkipEmbed (IsEmbeddedContext c c')
  | ENone, NoneType => EmptyEmbed
  | ECons c t, ConsType c' {*} f => ConsEmbed (f = embedType t) (h : IsEmbeddedContext c c')

\func liftEmbedded
  {c : ExtendedContext}
  {kc : KindContext} {c' : TypeContext kc}
  (h : IsEmbeddedContext c c') {K : Kind} : IsEmbeddedContext c (liftTypes c' {K})
\elim c, c', h
  | c, ConsType c' f, SkipEmbed h => SkipEmbed (liftEmbedded h)
  | ENone, NoneType, EmptyEmbed => EmptyEmbed
  | ECons c t, ConsType c' {*} f, ConsEmbed idp h => ConsEmbed embedType.renameEmbed (liftEmbedded h)

\func embedLookup {c : ExtendedContext} {T : ExtendedType} (l : ELookup c T) {kc : KindContext} {c' : TypeContext kc} (h : IsEmbeddedContext c c')
  : Lookup' c' (embedType T)
\elim c, l, c', h
  | ENone, (), _, _
  | c, l, ConsType c1 {*} f, SkipEmbed h => S (embedLookup l h)
  | ECons c t, EZ idp, ConsType c1 {*} f, ConsEmbed idp _ => Z idp
  | ECons c t, ES l, ConsType c1 {*} f, ConsEmbed idp h => S (embedLookup l h)

\func embedExtended {c : ExtendedContext} {T : ExtendedType}
                    (t : c ⊩ T) {c' : Context} (h : IsEmbeddedContext c c'.tc) : c' ⊢ (embedType T)
\elim T, t
  | T, ⊩.var l => var (embedLookup l h)
  | e--> A B, ⊩.lam t => lam (embedExtended t {c' ∕ (embedType A)} (ConsEmbed idp h))
  | T, ⊩.⋅ f arg => (embedExtended f h) ⋅ (embedExtended arg h)

  | ExtendedType.PNat, ⊩.natOf n => embedNat n

  | ExtendedType.⋇ A B, ⊩.pair t1 t2 => forAll (lam (v0 ⋅
      (embedExtended t1 (SkipEmbed (liftEmbedded h))) ⋅
      (embedExtended t2 (SkipEmbed (liftEmbedded h)))))

  | A, ⊩.fst {B} t =>
    \let!
      | AA => embedType A | BB => embedType B
      | st : c' ⊢ ((AA --> BB --> AA) --> AA) => (embedExtended t h) ⋅⋅ (embedType A, pmap2 (-->) (pmap2 (-->) (inv embedType.substEmbed) (pmap2 (-->) (inv embedType.substEmbed) idp)) idp)
      | fst : c' ⊢ AA --> BB --> AA => lam (lam v1)
    \in st ⋅ fst

  | B, ⊩.snd {A} t =>
    \let!
      | AA => embedType A | BB => embedType B
      | st : c' ⊢ ((AA --> BB --> BB) --> BB) => (embedExtended t h) ⋅⋅ (embedType B, pmap2 (-->) (pmap2 (-->) (inv embedType.substEmbed) (pmap2 (-->) (inv embedType.substEmbed) idp)) idp)
      | snd : c' ⊢ AA --> BB --> BB => lam (lam v0)
    \in st ⋅ snd

  | ExtendedType.⊎ A B, ⊩.isLeft t => forAll (lam (lam (v1 ⋅ (embedExtended t (SkipEmbed (SkipEmbed (liftEmbedded h)))))))
  | ExtendedType.⊎ A B, ⊩.isRight t => forAll (lam (lam (v0 ⋅ (embedExtended t (SkipEmbed (SkipEmbed (liftEmbedded h)))))))
  | T, ⊩.caseSum {A} {B} t elimA elimB =>
    \let!
      | AA => embedType A | BB => embedType B | TT => embedType T
      | st : c' ⊢ ((AA --> TT) --> (BB --> TT) --> TT) => (embedExtended t h) ⋅⋅ (embedType T, pmap2 (-->) (pmap2 (-->) (inv embedType.substEmbed) idp) (pmap2 (-->) (pmap2 (-->) (inv embedType.substEmbed) idp) idp))
      | elA : c' ∕ AA ⊢ TT => embedExtended elimA {c' ∕ AA} (ConsEmbed idp h)
      | elB : c' ∕ BB ⊢ TT => embedExtended elimB {c' ∕ BB} (ConsEmbed idp h)
    \in st ⋅ (lam elA) ⋅ (lam elB)

  | T, ⊩.let {A} x in =>
    \let!
      | body => embedExtended in {c' ∕ (embedType A)} (ConsEmbed idp h)
    \in (lam body) ⋅ (embedExtended x h)

  | ExtendedType.Unit, ⊩.unit => forAll (lam v0)

  | ExtendedType.ListOf A, ⊩.nil => forAll (lam (lam v1))
  | ExtendedType.ListOf A, ⊩.cons head tail => forAll
      (lam (lam
          (v0 ⋅ (embedExtended head (SkipEmbed (SkipEmbed (liftEmbedded h)))) ⋅
          (((embedExtended tail (SkipEmbed (SkipEmbed (liftEmbedded h)))) ⋅⋅ (T0, pmap2 (-->) idp (pmap2 (-->) (pmap2 (-->) (inv embedType.substEmbed) idp) idp)))
              ⋅ v1 ⋅ v0))
             ))
  | T, ⊩.caseList l elimNil elimCons => {?}

\where {
  -- Alternatively compute directly as f^nth
  \func embedNat (n : Nat) {c : Context} : c ⊢ (embedType PNat) 
    \elim n
      | 0 => forAll (lam (lam v1))
      | suc n => succ_f ⋅ (embedNat n)

  \where {
    \func succ_f {c : Context} : c ⊢ (embedType PNat) --> (embedType PNat)
      => lam (forAll (lam (lam (v0 ⋅ (v2 ⋅⋅ (T0, idp) ⋅ v1 ⋅ v0)))))
  }

-- computes a bit slowly

  \func example : evalErased 3 (embedExtended {ENone} {Unit} (fst (pair unit unit)) EmptyEmbed) = (u_lam (u_var (EZ idp)))
    => idp

  \func example2 : evalErased 6 (embedExtended {ENone} {Unit}
      (snd (caseSum (isLeft unit) (pair unit (e_var (EZ idp))) (pair (e_var (EZ idp)) unit))) {∅} EmptyEmbed) = (u_lam (u_var (EZ idp)))
    => idp
}
