\import Data.Or
\import Logic.Meta
\import systemFDeBruijne.Reduction
\import systemFDeBruijne.SystemF
\import systemFDeBruijne.Type


\func progress {kc : KindContext} {K : Kind} {T : FType kc K} (t : constructor kc NoneType ⊢ T)
  : Or (Value t) (Reduction t)
  \elim K, T, t
    | K, T, var l => \case l
    | *, --> A B, lam t => inl V-Lam
    | *, ForAllTy k T, forAll t => inl V-FA
    | *, T, ⋅ t1 t2 => \case progress t1 \with {
      | inr r => inr (F-App1 r)
      | inl v1 => \case progress t2 \with {
        | inr r => inr (F-App2 r v1)
        | inl v2 => \case \elim t1, v1 \with {
          | lam t, V-Lam => inr (F-Beta v2)
        }
      }
    }
    | *, T, ⋅⋅ t arg => \case progress t \with {
      | inr r => inr (F-TApp1 r)
      | inl v => \case \elim t, v \with {
        | forAll t, V-FA => inr F-TBeta
      }
    }