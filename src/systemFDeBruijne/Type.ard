\import Logic.Meta
\import Meta
\import Paths
\import Paths.Meta
\import systemFDeBruijne.SystemF

\data TypeContext (kc : KindContext) : \Set
  | NoneType
  | ConsType (c : TypeContext kc) {K : Kind} (FType kc K)
\where {
  \func length {kc : KindContext} (c : TypeContext kc) : Nat \elim c
    | NoneType => 0
    | ConsType c f => suc (length c)
}


\data KindContext : \Set
  | NoneKind
  | ConsKind (c : KindContext) Kind

\record Context
  | kc : KindContext
  | tc : TypeContext kc

\func None \alias ∅ : Context \cowith
  | kc => NoneKind
  | tc => NoneType

\func addType \alias \infixl 6 ∕ (c : Context) {K : Kind} (T : FType c.kc K) : Context \cowith
  | kc => c.kc
  | tc => ConsType c.tc T
\func liftTypes {kc : KindContext} (c : TypeContext kc) {K : Kind} : TypeContext (ConsKind kc K)
  \elim c
    | NoneType => NoneType
    | ConsType c f => ConsType (liftTypes c) (FType.addKind f)

\func addKind \alias \infixl 6 ∕∕ (c : Context) (K : Kind) : Context \cowith
  | kc => ConsKind c.kc K
  | tc => liftTypes c.tc


-- check if a type has the type K
\data LookupType \alias \infix 5 ∋∋ (c : KindContext) (K : Kind) : \Set
\elim c
  | ConsKind c head => ZK (head = K)
  | ConsKind c head => SK (c ∋∋ K)

-- check if a var has type T
\data Lookup' {kc : KindContext} (c : TypeContext kc) {K : Kind} (T : FType kc K) : \Set
\elim c
  | ConsType c {K'} head => Z ((K', head) = {\Sigma (U : Kind) (FType kc U)} (K, T))
  | ConsType c head => S (Lookup' c T)

\func Lookup \alias \infix 5 ∋ (c : Context) {K : Kind} (T : FType c.kc K) => Lookup' tc T

\data Kind : \Set
  | *
  -- does this make it systemF_omega?
  -- | \infixl 6 ==> Kind Kind

\data FType (c : KindContext) (K : Kind) : \Set
\elim K
  | K => VarTy (c ∋∋ K)
  | * => \infixr 6 --> (A B : FType c *)
  | * => ForAllTy (k : Kind) {K : Kind} (FType (ConsKind c k) K)

\where {
  \func Rename (kc kc' : KindContext) => \Pi {K : Kind} (kc ∋∋ K) -> kc' ∋∋ K

  \func extend {kc kc' : KindContext} {K' : Kind} (h : Rename kc kc') : Rename (ConsKind kc K') (ConsKind kc' K')
    => \lam {K} l => \case \elim l \with {
      | ZK p => ZK p
      | SK l => SK (h l)
    }

  \func rename {kc kc' : KindContext} {K : Kind} (h : Rename kc kc') (t : FType kc K) : FType kc' K
  \elim K, t
    | K, VarTy l => VarTy (h l)
    | *, --> A B => (rename h A) --> (rename h B)
    | *, ForAllTy k t => ForAllTy k (rename (extend h) t)


  \func Subst (kc kc' : KindContext) => \Pi {K : Kind} (kc ∋∋ K) -> FType kc' K

  \func extends {kc kc' : KindContext} (h : Subst kc kc') {K : Kind} : Subst (ConsKind kc K) (ConsKind kc' K)
    => \lam {K1} l => \case \elim l \with {
      | ZK p => VarTy (ZK p)
      | SK l => rename SK (h l)
    }

  \func subst {kc kc' : KindContext} (s : Subst kc kc') {K : Kind} (T : FType kc K) : FType kc' K
  \elim K, T
    | K, VarTy l => s l
    | *, --> A B => (subst s A) --> (subst s B)
    | *, ForAllTy k T => ForAllTy k (subst (extends s) T)

  \func sub {kc : KindContext} {K K' : Kind} (T : FType (ConsKind kc K) K') (T' : FType kc K) : FType kc K'
    => subst (extendOne T') T
    \where {
      \func extendOne {kc : KindContext} {K : Kind} (T' : FType kc K) {K' : Kind} (h : ConsKind kc K ∋∋ K') : FType kc K'
      \elim h
        | ZK idp => T'
        | SK h => VarTy h
    }

  \func addKind {kc : KindContext} {K : Kind} (T : FType kc K) {K' : Kind} : FType (ConsKind kc K') K
    => rename SK T
  \where {
    \func addKindArrow
      {c : KindContext}
      {A B : FType c *} {K : Kind}  : addKind (A --> B) {K} = addKind A {K} --> addKind B {K}
      \elim K
        | * => idp
        -- | ==> K1 K2 => idp


    \func unAddKind {kc : KindContext}
      {K K' K'' : Kind}
      {T : FType kc K} {T' : FType kc K'}
      (p : (K, addKind T {K''}) = {\Sigma (U : Kind) (FType (ConsKind kc K'') U)} (K', addKind T' {K''}))
      : (K, T) = {\Sigma (U : Kind) (FType kc U)} (K', T')
      \elim K, K', T, T', p
        | *, *, VarTy l, VarTy l1, p => ext (idp, {?})
        | *, *, --> A B, --> A1 B1, p => {?}
        | *, *, ForAllTy k T, ForAllTy k1 T', p => {?}


        | *, *, VarTy l, --> A B, p => {?}
        | *, *, VarTy l, ForAllTy k T', p => {?}
        | *, *, --> A B, VarTy l, p => {?}
        | *, *, --> A B, ForAllTy k T', p => {?}
        | *, *, ForAllTy k T, VarTy l, p => {?}
        | *, *, ForAllTy k T, --> A B, p => {?}
  }

}