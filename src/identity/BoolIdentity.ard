\import Data.Bool
\import Equiv
\import Function
\import Logic
\import Logic.Meta
\import Meta
\import Paths.Meta
\import Set
\import identity.DecMaps
\import identity.Identity
\import sets.MySet
\import sets.finite.Sized

\instance BoolIdentity : Identity.Decidable Bool
  | Code a b => \case a, b \with {
    | false, false => \Sigma
    | false, true => Empty
    | true, false => Empty
    | true, true => \Sigma
  }
  | code-refl a => cases a ()
  | code-decode {a} {b} c => cases (a, b, c) idp
  | code-decide a b => \case \elim a, \elim b \with {
    | false, false => yes ()
    | false, true => no id
    | true, false => no id
    | true, true => yes ()
  }

-- use instead of generic one if you want to compute
\func eqBool \alias \infix 6 bool≟  (x y : Bool) : Dec (x = y) \elim x, y
  | false, false => yes idp
  | false, true => no (\lam p => contradiction)
  | true, false => no (\lam p => contradiction)
  | true, true => yes idp

\func eqBool? \alias \infix 6 bool≟≟  (x y : Bool) : Bool => decToBool (x bool≟ y)
\where {
  \func test : false bool≟≟ true = false => idp
}

\func BoolDecSet : DecSizedEnsemble Bool universal \cowith
  | decideEq => bool≟
  | size => 2
  | sizeProof => ext (\new QEquiv {
    | f => \case __ \with {
      | (true, _) => 0
      | (false, _) => 1
    }
    | ret => \case __ \with {
      | 0 => (true, ())
      | 1 => (false, ())
    }
    | ret_f => \case \elim __ \with {
      | (true, ()) => idp
      | (false, ()) => idp
    }
    | f_sec => \case \elim __ \with {
      | 0 => idp
      | 1 => idp
    }
  })
