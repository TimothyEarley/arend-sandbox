\import Algebra.Meta
\import Arith.Int
\import Data.Bool (Bool, false, true)
\import Logic
\import Logic.Meta
\import Meta
\import Paths
\import Paths.Meta
\import limp.LIMP
\import util.Maybe

\func aexp_deterministic {S : Signature} {a : AExp} {n n' : Num} {s : State S}
                         (h : (a, s) aEval n) (h' : (a, s) aEval n') : n = n' \elim a, h, h'
  | ⊕ a b, rPlus {n1} {n2} h1 h2 p, rPlus {n1'} {n2'} h'1 h'2 p1 => \case aexp_deterministic h1 h'1, aexp_deterministic h2 h'2 \with {
    | q, q' => p *> pmap2 (IntRing.+) q q' *> inv p1
  }
  | ⊖ a b, rMinus {n1} {n2} h1 h2 p, rMinus {n1'} {n2'} h'1 h'2 p1 => \case aexp_deterministic h1 h'1, aexp_deterministic h2 h'2 \with {
    | q, q' => p *> pmap2 (__ IntRing.+ IntRing.negative __) q q' *> inv p1
  }
  | ⊙ a b, rTimes {n1} {n2} h1 h2 p, rTimes {n1'} {n2'} h'1 h'2 p1 => \case aexp_deterministic h1 h'1, aexp_deterministic h2 h'2 \with {
    | q, q' => p *> pmap2 (IntRing.*) q q' *> inv p1
  }
  | var v, rVar p, rVar p1 => inv p *> p1
  | num n'1, rNum p, rNum p1 => p *> inv p1

-- TODO easy proofs
\func bexp_deterministic {S : Signature} {e : BExp} {b b' : Bool} {s : State S}
                         (h : (e, s) bEval b) (h' : (e, s) bEval b') : b = b' \elim e, b, b', h, h'
  | e, false, false, h, h' => idp
  | e, true, true, h, h' => idp

  | tt, false, _, rtrue (), _
  | tt, _, false, _, rtrue ()

  | ff, true, _, rfalse (), _
  | ff, _, true, _, rfalse ()

  | eq a b, false, true, reqf () x y p, reqt () x' y' q => absurd (p (aexp_deterministic x x' *> q *> aexp_deterministic y' y))
  | eq a b, true, false, reqt () x' y' q, reqf () x y p => absurd (p (aexp_deterministic x x' *> q *> aexp_deterministic y' y))
  | eq a b, true, _, reqf () _ _ _, _
  | eq a b, false, _, reqt () _ _ _, _
  | eq a b, _, true, _, reqf () _ _ _
  | eq a b, _, false, _, reqt () _ _ _

  | leq a1 b1, false, true, rleqf () a a2 n, rleqt () a3 a4 _x => {?}
  | leq a1 b1, true, false, rleqt () a3 a4 _x, rleqf () a a2 n => {?}
  | leq a1 b1, false, _, rleqt () _ _ _, _
  | leq a1 b1, true, _, rleqf () _ _ _, _
  | leq a1 b1, _, true, _, rleqf () _ _ _
  | leq a1 b1, _, false, _, rleqt () _ _ _

  | not e, false, true, rnotf () h, rnott () h' => {?}
  | not e, true, false, rnott () h', rnotf () h => {?}
  | not e, true, _, rnotf () _, _
  | not e, false, _, rnott () _, _
  | not e, _, true, _, rnotf () _
  | not e, _, false, _, rnott () _

  | and a1 e, true, false, randt () h'1 h'2, randf1 () h => {?}
  | and a1 e, true, false, randt () h'1 h'2, randf2 () h => {?}
  | and a1 e, false, true, randf1 () h, randt () h'1 h'2 => {?}
  | and a1 e, false, true, randf2 () h, randt () h'1 h'2 => {?}
  | and a1 e, true, _, randf1 () _, _
  | and a1 e, true, _, randf2 () _, _
  | and a1 e, false, _, randt () _ _, _
  | and a1 e, _, true, _, randf1 () _
  | and a1 e, _, true, _, randf2 () _
  | and a1 e, _, false, _, randt () _ _

  | or a1 e, false, true, rorf () h1 h2, rort1 () h' => {?}
  | or a1 e, false, true, rorf () h1 h2, rort2 () h' => {?}
  | or a1 e, true, false, rort1 () h', rorf () h1 h2 => {?}
  | or a1 e, true, false, rort2 () h', rorf () h1 h2 => {?}
  | or a1 e, true, _, rorf () _ _, _
  | or a1 e, false, _, rort1 () _, _
  | or a1 e, false, _, rort2 () _, _
  | or a1 e, _, true, _, rorf () _ _
  | or a1 e, _, false, _, rort1 () _
  | or a1 e, _, false, _, rort2 () _

\func com_deterministic {S : Signature} {c : Com} {s s' s'' : State S}
                        (h : (c, s) cEval s') (h' : (c, s) cEval s'') : s' = s'' \elim c, h, h'
  | skip, rsk p1, rsk p2 => p1 *> inv p2
  | := X a, r:= {n1} a1 p, r:= {n2} a2 p1 => p *> pmap (substVar _ _ __) (aexp_deterministic a1 a2) *> inv p1
  | # x y, r# {s1} h1 h2, r# {s2} h'1 h'2 => \let q => com_deterministic h1 h'1 \in com_deterministic h2 (rewrite q h'2)
  | ite b t e, rift b1 h, rift b2 h' => com_deterministic h h'
  | ite b t e, rift b1 h, riff b2 h' => usingOnly (bexp_deterministic b1 b2) contradiction
  | ite b t e, riff b1 h, rift b2 h' => usingOnly (bexp_deterministic b1 b2) contradiction
  | ite b t e, riff b1 h, riff b2 h' => com_deterministic h h'
  | while b c, rwht b1 {s1} h1 h2, rwht b2 {s2} h'1 h'2 => \let q => com_deterministic h1 h'1 \in com_deterministic h2 (rewrite q h'2)
  | while b c, rwht b1 h1 h2, rwhf b2 p => usingOnly (bexp_deterministic b1 b2) contradiction
  | while b c, rwhf b1 p, rwht b2 h'1 h'2 => usingOnly (bexp_deterministic b1 b2) contradiction
  | while b c, rwhf b1 p, rwhf b2 p1 => equation
  | append e a, rAp a1 p, rAp a2 p1 => using (pmap (\lam n => substList s e (cEval.appendList (s.lists e) n)) (aexp_deterministic a1 a2)) equation
  | :=L v lv a, rSt {n1} a1 {e1} p p1, rSt {n2} a2 {e2} p2 p3 =>
    \let | q1 : cEval.select (s.lists lv) n1 = cEval.select (s.lists lv) n2 => pmap (cEval.select (s.lists lv) __) (aexp_deterministic a1 a2)
         | q' : e1 = e2 => dejust (inv p *> q1 *> p2)
         | q2 : substVar s v e1 = substVar s v e2 => pmap (substVar _ _ __) q'
    \in p1 *> q2 *> inv p3

