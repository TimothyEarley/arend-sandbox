\import Logic
\import Logic.Meta
\import LogicUtil

\class SetTheory (Set : \Type) {
  | Element \alias \infix 7 ∈ : \Pi (x : Set) (y : Set) -> \Prop

  | existence : Set

  | empty \alias ∅ : Set
  | empty-IsEmpty : \Pi (z : Set) -> Not (z ∈ ∅)

  | extensional : \Pi {x y : Set} (\Pi (z : Set) (z ∈ x) -> z ∈ y) (\Pi (z : Set) (z ∈ y) -> z ∈ x) -> x = y

  | pairing : \Pi (x y : Set) -> Set
  | pairing-proof : \Pi (x y : Set) -> \Pi (z : Set) -> z ∈ pairing x y <-> (z = x) || (z = y)

  | union : \Pi (x : Set) -> Set
  | union-proof : \Pi (x : Set) -> \Pi (z : Set) -> z ∈ union x <--> (\Sigma (z' : Set) (z' ∈ x) (z ∈ z'))

  | power : \Pi (x : Set) -> \Sigma (pow : Set) (\Pi (z : Set) -> z ∈ pow <-> (\Pi (z' : Set) (z' ∈ z) -> z' ∈ x)) -- z ⊆ x

  | seperation : \Pi (x : Set) (Phi : \Pi (x' : Set) (x' ∈ x) -> \Prop) -> \Sigma (s : Set) (\Pi (z : Set) -> z ∈ s <-> (\Sigma (zx : z ∈ x) (Phi z zx)))

  -- TODO F should be FO-definable
  | replacement : \Pi (x : Set) (F : \Pi (x' : Set) (x' ∈ x) -> Set) -> ∃ (s : Set) (\Pi (z : Set) -> z ∈ s <--> (\Sigma (a : Set) (ax : a ∈ x) (z = F a ax)))
  | infinity : \Sigma (s : Set) (∅ ∈ s) (\Pi (x : Set) (x ∈ s) -> union (pairing x (pairing x x)) ∈ s)

  \func subset \alias \infix 7 ⊆ (x y : Set) : \Prop => \Pi (z : Set) (z ∈ x) -> z ∈ y

  \func russelsParadox (h : ∃ (x : Set) (\Pi (y : Set) -> Not (y ∈ y) <-> y ∈ x))
                       : Empty
    \elim h
      | inP (x, f) =>
        \let
          | (f'1, f'2) => f x
          | nNotIn : Not (x ∈ x) => \lam e => f'2 e e
          | nIn : x ∈ x => f'1 nNotIn
      \in nNotIn nIn
}
\where {
  \class SetTheoryImpl \extends SetTheory
    | ∅ => (seperation existence (\lam x' e => Empty)).1
    | empty-IsEmpty s e => (((seperation existence (\lam x' e => Empty)).2 s).1 e).2
}