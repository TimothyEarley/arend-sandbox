\import Data.Bool
\import Data.List
\import Set
\import automaton.Language
\import automaton.Regular
\import sets.DecidableSet
\import sets.MySet
\import sets.finite.Sized

\class DFA
  | Action : \Set
  | State : DecSizedEnsemble
  | delta : \Pi State Action -> State
  | start : State
  | End : Ensemble State
  | isEnd : DecElementEnsemble State End

  \where {
    \data accepts (d : DFA) (s : d.State) (u : Word d.Action) \elim u
      | nil => isLast (d.End s)
      | :: a tail => isStep (accepts d (d.delta s a) tail)

    \func language (d : DFA) : Language d.Action => \lam u => accepts d d.start u

    \func accepts? (d : DFA) (s : d.State) (u : Word d.Action) : Dec (accepts d s u) \elim u
      | nil => \case d.isEnd.decElement s \with {
        | yes e => yes (isLast e)
        | no n => no (\case __ \with {
          | isLast e => n e
        })
      }
      | :: a l =>
        \let next => delta s a
        \in \case accepts? d next l \with {
          | yes e => yes (isStep e)
          | no n => no (\case __ \with {
            | isStep h => n h
          })
        }

    \func language? (d : DFA) (u : Word d.Action) : Dec (language d u) => accepts? d d.start u
  }