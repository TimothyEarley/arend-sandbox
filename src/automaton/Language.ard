\import Data.List
\import Logic
\import Logic.Meta
\import Paths.Meta
\import Set
\import sets.MySet
\import sets.union

\func Alphabet => \Set
\func DecAlphabet => DecSet

\func Word (A : Alphabet) => List A

\func Language (A : Alphabet) => Ensemble (Word A)

\where {
  \func concat \alias \infix 6 ∘ {A : Alphabet} (L L' : Language A) : Language A =>
    \lam w => ∃ (v v' : Word A) (w = v ++ v') (L v) (L' v')

  \func concat-self+1 {A : Alphabet} (L : Language A) (n : Nat) : Language A \elim n
    | 0 => L
    | suc n => L ∘ concat-self+1 L n

  \func star {A : Alphabet} (L : Language A) : Language A =>
    (\lam w => ∃ (n : Nat) (concat-self+1 L n w)) ∪ single nil
  \where {
    \func addOne {A : Alphabet} {L : Language A} {w w' : Word A}
      (h : w ∈ L) (h' : w' ∈ star L) : (w ++ w') ∈ star L
      \elim h'
        | byRight idp => byLeft (inP (0, rewrite ++_nil h))
        | byLeft (inP (n, c)) => byLeft (inP (suc n, inP (w, w', idp, h, c)))
  }

}