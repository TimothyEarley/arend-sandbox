\import Arith.Nat
\import Data.List
\import Data.Or
\import Logic
\import Logic.Meta
\import Paths
\import Paths.Meta
\import Set
\import automaton.DFA
\import automaton.Language
\import automaton.Regular
\import sets.DecidableSet
\import sets.Elements
\import sets.MySet
\import sets.finite.Sized

\record NFA
  | Action : \Set
  | State : DecSizedEnsemble
  | delta : (\Sigma State Action State) -> \Prop
  | start : State
  | End : State -> \Prop
  | isEnd : DecElementEnsemble State End

  \where {
    \truncated \data accepts (d : NFA) (q : d.State) (u : Word d.Action) : \Prop \elim u
      | nil => isLast (d.End q)
      | :: a tail => isStep (q' : d.State) (d.delta (q, a, q')) (accepts d q' tail)

    \func language (d : NFA) : Language d.Action => \lam u => accepts d d.start u

  }