\import Data.List
\import Set
\import automaton.Language
\import sets.DecidableSet

\record NFA
  | Action : \Set
  | State : \Set
  | delta : (\Sigma State Action State) -> \Prop
  | start : State
  | End : State -> \Prop
  \where {
    \class DecidableNFA \extends NFA
      | decState : DecSet State
      | isEnd : DecElementEnsemble State End

    \truncated \data accepts (d : NFA) (q : d.State) (u : Word d.Action) : \Prop \elim u
      | nil => isLast (d.End q)
      | :: a tail => isStep (q' : d.State) (d.delta (q, a, q')) (accepts d q' tail)

    \func language (d : NFA) : Language d.Action => \lam u => accepts d d.start u

  }