\import Data.List
\import Paths.Meta
\import automaton.DFA
\import automaton.NFA \hiding (Action, End, State, delta, isEnd, start)
\import automaton.Language

\func DFAToNFA {A : Alphabet} (d : DFA A) : NFA A \cowith
  | State => d.State
  | delta => \lam t => d.delta t.1 t.2 = t.3
  | start => d.start
  | End => d.End
  | isEnd => d.isEnd
  \where {
    \func respectsLanguage {A : Alphabet} {d : DFA A} : DFA.language d = {Language A} NFA.language (DFAToNFA d) =>
      ext (\lam w => ext
          (helper1 w,
           helper2 w))

    \func helper1 {d : DFA} (w : Word d.Action) {q : d.State} (l : DFA.accepts d q w)
      : NFA.accepts (DFAToNFA d) q w \elim w, l
      | nil, DFA.isLast e => NFA.isLast e
      | :: a tail, DFA.isStep a1 => NFA.isStep (d.delta q a) idp (helper1 tail a1)

    \func helper2 {d : DFA} (w : Word d.Action) {q : d.State} (l : NFA.accepts (DFAToNFA d) q w) : DFA.accepts d q w
      \elim w, l
        | nil, NFA.isLast e => DFA.isLast e
        | :: a tail, NFA.isStep q' idp l => DFA.isStep (helper2 tail l)
  }