\import Paths.Meta
\import automaton.NFAMultiStart \hiding (Action, End, State, delta, start)
\import automaton.NFAeps
\import sets.Add
\import sets.union

\func nFAepsToNFAMS (nfaeps : NFAeps) : NFAMultiStart \cowith
  | Action => nfaeps.Action
  | State => nfaeps.State
  | delta => makeDelta nfaeps ∪ existingDelta nfaeps
  | start => add {?} nfaeps.start
  | End => {?} ∪ nfaeps.End

\where {

  \func makeDelta (nfaeps : NFAeps) : (\Sigma nfaeps.State nfaeps.Action nfaeps.State) -> \Prop
    => {?}

  \func existingDelta (nfaeps : NFAeps) : (\Sigma nfaeps.State nfaeps.Action nfaeps.State) -> \Prop
    => \lam (s,a,s1) => nfaeps.delta (s, NFAeps.action a, s1)

  \func respectsLanguage {nfaeps : NFAeps} : NFAeps.language nfaeps = NFAMultiStart.language (nFAepsToNFAMS nfaeps)
    => ext (\lam w => ext ({?},
                           {?}))
}