\import Logic
\import Logic.Meta
\import Paths
\import Paths.Meta
\import Set
\import sets.Add
\import sets.Family
\import sets.MySet
\import sets.Single
\import sets.union

-- {{a}} ∪ {{a, b}}

\func pair {A : \Set} (a b : A) : Family A => single (single a) ∪ single (add (single a) b)

  \where {
    -- {{a}} ∪ {{a, a}} = {{a}}

    \func refl-pair {A : \Set} {a : A} : pair a a = single (single a) => extSet
        (\lam {x} e => \case \elim e \with {
          | byLeft a1 => a1
          | byRight b => inv (add.alreadyIn idp) *> b
        })
        (\lam {x} e => byLeft e)

    -- TODO can this be proven without Dec?

    \lemma extract {A : DecSet} {a b a' b' : A} : (\Sigma (a = a') (b = b')) <-> (pair a b = pair a' b') =>
      (\lam p => \case \elim a, \elim b, \elim p \with {
        | _, _, (idp, idp) => idp
      },
       \lam p => \case \elim a, \elim p, decideEq a b \with {
         | _, p, yes idp =>
           \let
             -- {{b}} = {{a'}, {a', b'}}
             | q : single (single b) = pair a' b' => inv (inv p *> refl-pair)
             | b=a' : b = a' => single.extract (transportInv (\lam _x => single a' ∈ _x) q (byLeft idp))
             -- {a', b'} ∈ {{b}}
             | q' : add (single a') b' ∈ single (single b) => transportInv (add (single a') b' ∈ __) q (byRight idp)
             | b=b' : b = b' => single.tele (byRight idp) q'
           \in (b=a', b=b')

         | a, p, no n =>
           \let
             | a'=a : a' = a => uniqueSingle {A} {a} {b} {a'} {a} (rewrite p (byLeft idp)) (byLeft idp) n

             -- {a, b} ∈ {{a}, {a', b'}}
             | fact : add (single a) b ∈ pair a' b' => rewriteI p (byRight idp)

             -- {a, b} = {a', b'}
             | ab=a'b' : add (single a) b = add (single a') b' => \case fact \with {
               | byLeft x =>
                 -- {a, b} = {a'}
                 \let t1 : a' = b => single.tele (byRight idp) x \in contradiction
               | byRight x => inv x
             }

             | b=b' : b = b' => \case transport (b ∈ __) ab=a'b' (byRight idp) \with {
               | byLeft x => contradiction
               | byRight x => inv x
             }

           \in (inv a'=a, b=b')
       })

    \lemma uniqueSingle {A : \Set} {a b x x' : A}
                        (h : single x ∈ pair a b)
                        (h' : single x' ∈ pair a b)
                        (u : a /= b)
      : x = x' \elim h, h'
      | byLeft a1, byLeft a2 => single.extract (inv a1 *> a2)
      | _, byRight b1 => \let
        | x'=a : x' = a => transport (a ∈ __) b1 (byLeft idp)
        | x'=b : x' = b => transport (b ∈ __) b1 (byRight idp)
                         \in absurd (u (inv x'=a *> x'=b))
      | byRight b1, _ => \let
        | x=a : x = a => transport (a ∈ __) b1 (byLeft idp)
        | x=b : x = b => transport (b ∈ __) b1 (byRight idp)
                         \in absurd (u (inv x=a *> x=b))
  }