\import Logic
\import Paths.Meta
\import sets.Add
\import sets.Elements
\import sets.Intersect
\import sets.MySet
\import sets.Single
\import sets.remove
\import sets.union

\func subset \alias \infix 5 ⊆ {A : \Type} (a b : Ensemble A) : \Prop => \Pi {x : A} (x ∈ a) -> x ∈ b

  \where {
    \func empty-is-subset \alias ∅-is-⊆ {A : \Set} {S : Ensemble A} : ∅ ⊆ S => \lam e => \case e \with {
    }

    \func refl {A : \Type} {x : Ensemble A} : x ⊆ x => \lam e => e

    \func trans {A : \Set} {a b c : Ensemble A} (h : a ⊆ b) (h' : b ⊆ c) : a ⊆ c => \lam ax => h' (h ax)

    \func anti-sym {A : \Set} {a b : Ensemble A} (h : a ⊆ b) (h' : b ⊆ a) : a = b => ext (\lam x => ext (h, h'))

    \func toFunction {A : \Set} {S S' : Ensemble A} (s : S ⊆ S') : (Elements S) -> (Elements S') =>
      \lam e => (e.1, s e.2)

    \func of-empty \alias ⊆∅-is-∅ {A : \Set} {S : Ensemble A} (h : S ⊆ ∅) : S = ∅ =>
      anti-sym h (∅-is-⊆ {A} {S})

    \func of-intersection-right \alias of-∩-right {A : \Set} {S S' : Ensemble A} : S ∩ S' ⊆ S'
      => \lam {x} e => e.2

    \func of-intersection-left \alias of-∩-left {A : \Set} {S S' : Ensemble A} : S ∩ S' ⊆ S
      => \lam {x} e => e.1

    \func singleSubset {A : \Set} {a : A} {as : Ensemble A} (h : a ∈ as) : single a ⊆ as
      => \lam {x} e => rewriteI e h

    \func unionSubset {A : \Set} {as bs cs : Ensemble A} (h : as ⊆ cs) (h' : bs ⊆ cs) : (as ∪ bs) ⊆ cs
      => \lam {x} e => \case e \with {
        | byLeft a => h a
        | byRight b => h' b
      }

    \func removeSubset {A : \Set} {as : Ensemble A} {a : A} : as without a ⊆ as => \lam {x} e => e.1

    \func unionSubset' {A : \Set} {as bs cs ds : Ensemble A} (h : as ⊆ cs) (h' : bs ⊆ ds) : (as ∪ bs) ⊆ (cs ∪ ds)
      => \lam {x} e => \case e \with {
        | byLeft a => byLeft (h a)
        | byRight b => byRight (h' b)
      }

    \func removeAdd {A : \Set} {as bs : Ensemble A} {a : A} (h : as ⊆ add bs a) : remove as a ⊆ bs
      => \lam {x} (e, ne) => \case h e \with {
        | byLeft xBs => xBs
        | byRight x=a => absurd (ne x=a)
      }
  }