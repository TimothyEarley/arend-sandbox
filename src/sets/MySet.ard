\import Equiv
\import Logic
\import Logic.Meta
\import Order.Lattice \hiding (∧)
\import Paths
\import Paths.Meta
\import Set
\import sets.Add
\import sets.Complement
\import sets.DecidableSet
\import sets.Elements
\import sets.Family
\import sets.Intersect
\import sets.finite.Sized
\import sets.subset
\import sets.union (∪, ⋃)
\import util.ArrayUtils
\open ArrayUtils (HasSome)

\func Ensemble (A : \Set) : \Set => A -> \Prop

\class BaseEnsemble \extends BaseSet
  | \classifying S : Ensemble E

\func element \alias \infix 6 ∈ {A : \Set} (a : A) (S : Ensemble A) : \Prop => S a

\func not-element \alias \infix 6 ∉ {A : \Set} (a : A) (S : Ensemble A) : \Prop => Not (S a)

\func extSet {A : \Set} {S S' : Ensemble A}
             (h : \Pi {x : A} (x ∈ S) -> x ∈ S') (h' : \Pi {x : A} (x ∈ S') -> x ∈ S) : S = S' =>
  ext (\lam x => ext (h, h'))

\func coerce {A : \Set} {S S' : Ensemble A} (p : S = S') (e : Elements S) : Elements S' \elim p
  | idp => e

\func All {A : \Set} (S : Ensemble A) (P : Ensemble A) : \Prop => \Pi (s : Elements S) -> P s.1

\func Any {A : \Set} (S : Ensemble A) (P : Ensemble A) : \Prop => ∃ (s : Elements S) (P s.1)
  \where {
    \func any? {A : \Set} (S : DecSizedEnsemble A) (P : DecElementEnsemble A) : Dec (Any S.S P) =>
      \let elements => S.toArray' \in \case HasSome.hasSome? elements P.decElement \with {
        | yes (inP (i, p)) => yes (inP (S.toArray i, p))
        | no n => no (\lam (inP a) =>
            \let (i, ih) => SizedEnsemble.toArray.complete {S} a.1
            \in n (inP (i, rewrite ih a.2)))
      }
  }

\func empty \alias ∅ {A : \Set} : Ensemble A => \lam _ => Empty

\func extSet-empty {A : \Set} {S : Ensemble A} (h : Not (Elements S)) : S = ∅ =>
  extSet (\lam {x} e => h (x, e)) (\lam {x} e => absurd e)

\func Not-empty {A : \Set} (S : Ensemble A) : \Prop => ∃ (a : A) (a ∈ S)

\func universal {A : \Set} : Ensemble A => \lam _ => \Sigma
  \where {
    \func universal=A {A : \Set} : Elements (universal {A}) = A => ext (\new QEquiv {
      | f e => e.1
      | ret a => (a, ())
      | ret_f x => \case \elim x \with {
        | (x1, ()) => idp
      }
      | f_sec a => idp
    })
  }

\lemma extSet-universal {X : \Set} {A : Ensemble X} (h1 : universal ⊆ A) : A = universal => extSet
    (\lam {x} a => ())
    h1

\func universal/=empty {A : \Set} (witness : A) : Not (universal {A} = ∅) => \lam p => (coerce p (witness, ())).2


\func distribute-intersect-union \alias distribute-∩-∪ {E : \Set} {A B S : Ensemble E} : (A ∪ B) ∩ S = (A ∩ S) ∪ (B ∩ S) =>
  extSet
      (\lam {x} e => \case \elim e \with {
        | (byLeft x1, x2) => byLeft (x1, x2)
        | (byRight x1, x2) => byRight (x1, x2)
      })
      (\lam {x} e => \case \elim e \with {
        | byLeft (x1, x2) => (byLeft x1, x2)
        | byRight (x1, x2) => (byRight x1, x2)
      })

\func deMorgan-union {E : \Set} {A B : Ensemble E}
  : (A ∪ B) `complement = (A `complement ∩ B `complement) =>
  extSet
      (∪.not-in-union {_} {A} {B} {_} __)
      (\lam {x} e u => ∪.not-in-union' {_} {A} {B} {_} e.1 e.2 u)

--\func deMorgan-complement {E : \Set} {A B : Ensemble E}
--  : (A ∩ B) `complement = (A `complement ∪ B `complement) =>
--  {?} -- I think this one needs LEM

\func product \alias \infix 6 ⋇ {A B : \Set} (S1 : Ensemble A) (S2 : Ensemble B) : Ensemble (\Sigma A B) =>
  \lam s => \Sigma (s.1 ∈ S1) (s.2 ∈ S2)
