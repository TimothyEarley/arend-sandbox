\import Data.Array
\import Function.Meta
\import Logic
\import Paths
\import Paths.Meta
\import Set \hiding (#)
\import sets.Add
\import sets.DecidableSet
\import sets.Image
\import sets.MySet
\import sets.subset
\import sets.union
\import util.So

\func fromArray {A : \Set} (l : Array A) : Ensemble A => \lam a => TruncP (Index a l)
  \where {
    \func fromNil {A : \Set} : fromArray {A} nil = ∅ => extSet-empty (\lam (_, inP (i, _)) => \case i)

    \lemma fromCons {A : \Set} {as : Array A} {a : A} : fromArray (a :: as) = fromArray as with a => extSet
        (\case \elim __ \with {
          | inP (0, p) => byRight p
          | inP (suc i, p) => byLeft (inP (i, p))
        })
        (\case \elim __ \with {
          | byLeft (inP (i, p)) => inP (suc i, p)
          | byRight b => inP (0, b)
        })

    \func subset-of-fromArray {X : \Set}
                              {l : Nat} {xs : Array X l}
                              (S : DecElementEnsemble X) (h : S ⊆ fromArray xs)
      : S.S = fromArray (filter (\lam z => decToBool (S.decElement z)) xs) =>
      extSet
          (\lam {x} e => \case h e \with {
            | inP (i, p) => rewriteI p $ inP $ filter-index (\lam z => decToBool (S.decElement z)) xs i (soTrue $ soYes {xs i ∈ S} $ rewrite p e)
          })
          (\lam {_} (inP (i, idp)) => trueDec $ filter-sat (\lam z => decToBool (S.decElement z)) xs i)

    \func bigUnion-of-fromArray {X : \Set} {xs : Array (Ensemble X)}
      : ⋃ (fromArray xs) = unionArray xs \elim xs
      | nil => extSet
          (rewrite (fromArray.fromNil, ⋃.emptyBigUnion) ⊆.∅-is-⊆)
          ⊆.∅-is-⊆
      | a :: l => rewrite (fromCons, ⋃.addToUnion, ∪.comm) (pmap (_ ∪ __) bigUnion-of-fromArray)
      \where {
        \func unionArray {X : \Set} (xs : Array (Ensemble X)) : Ensemble X \elim xs
          | nil => ∅
          | a :: l => a ∪ unionArray l
      }

    \func fromArrayImage {A B : \Set} {f : A -> B} {l : Array A}
      : fromArray l smap f = fromArray (map f l)
      => extSet
          (\lam {_} (inP (_, idp, inP (i, idp))) => inP (i, idp))
          (\lam {_} (inP (i, idp)) => inP (l i, idp, inP (i, idp)))
  }


