\import Logic
\import Logic.Meta
\import Paths
\import Paths.Meta
\import sets.Add
\import sets.Family
\import sets.MySet
\import sets.union

\func single {A : \Set} (a : A) : Ensemble A => \lam a' => a = a'
  \where {
    \lemma extract {A : \Set} {a a' : A} (h : single a = single a') : a = a' => transportInv ((∈) a') h idp

    \lemma single=single {A : \Set} {a a' : A} (p : a = a') : single a = single a' => rewrite p idp

    -- x ∈ S, S ∈ {{c}} => c = x

    \lemma tele {A : \Set} {x c : A} {S : Ensemble A} (hx : x ∈ S) (h : S ∈ single (single c)) : c = x =>
      transportInv (\lam _x => x ∈ _x) h hx

    \lemma notTwoElements {A : \Set} {a x x' : A}
                          (h : x /= x')
                          (e1 : x ∈ single a) (e2 : x' ∈ single a)
      : Empty
    \elim e1, e2
      | idp, idp => h idp

    \func isAddToEmpty {A : \Set} {a : A} : single a = ∅ with a =>
      extSet (\lam e => byRight e) (\lam {x} e => \case e \with {
        | byLeft ()
        | byRight b => b
      })

    \func splitIntoSingles {A : \Set} (S : Ensemble A) : Family A =>
      \lam e => ∃ (a : A) (a ∈ S) (e = single a)
      \where {
        \func emptySplit {A : \Set} : splitIntoSingles ∅ = ∅ {Ensemble A} => extSet-empty (\lam (x, inP y) => y.2)

        \func addSplit {A : \Set} {S : Ensemble A} {a : A} : splitIntoSingles (add S a) = add (splitIntoSingles S) (single a) =>
          extSet
              (\lam {x} (inP (a', a'Sa, p)) => \case a'Sa \with {
                | byLeft a'S => byLeft (inP (a', a'S, p))
                | byRight a'=a => byRight (rewrite a'=a (inv p))
              })
              (\lam {x} e => \case e \with {
                | byLeft (inP xSS) => inP (xSS.1, byLeft xSS.2, xSS.3)
                | byRight xa => inP (a, byRight idp, inv xa)
              })

        \func bigUnionUnsplit {A : \Set} {S : Ensemble A} : ⋃ (splitIntoSingles S) = S => extSet
            (\lam {x} (inP (S', inP (a, aS, idp), idp)) => aS)
            (\lam {x} xS => inP (single x, inP (x, xS, idp), idp))
      }
  }