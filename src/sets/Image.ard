\import Logic
\import Logic.Meta
\import Paths
\import sets.Add
\import sets.MySet

\func Image \alias \infixl 6 smap {A B : \Set} (S : Ensemble A) (f : A -> B) : Ensemble B => \lam b => ∃ (a : A) (b = f a) (a ∈ S)
  \where {
    \func empty-smap {A B : \Set} {f : A -> B} : ∅ smap f = ∅ => extSet
        (\lam {x} e => \case e \with {
        inP a => a.3
        })
        (\lam e => absurd e)

    \func add-smap {A B : \Set} {f : A -> B} {S : Ensemble A} {a : A} : (add S a smap f) = add (S smap f) (f a) =>
      extSet
          (\lam {x} e => \case e \with {
            | inP (a', p, byLeft a'S) => byLeft (inP (a', p, a'S))
            | inP (a', p, byRight a'=a) => byRight (pmap f a'=a *> inv p)
          })
          (\lam {x} e => \case e \with {
            | byLeft (inP xFs) => inP (xFs.1, xFs.2, byLeft xFs.3)
            | byRight x=fa => inP (a, inv x=fa, ||.byRight idp)
          })
  }

\func Image' {A B : \Set} (f : A -> B) : Ensemble B => \lam b => ∃ (a : A) (b = f a)
\where {
  \func Image'=ImageOfUniversal : Image' f = universal smap f
    => extSet
        (\lam {x} (inP e) => inP (e.1, e.2, ()))
        (\lam {x} (inP e) => inP (e.1, e.2))

}

\func PreImage {A B : \Set} (S : Ensemble B) (f : A -> B) : Ensemble A => \lam a => f a ∈ S