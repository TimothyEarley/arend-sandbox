\import Meta
\import Paths
\import Star
\import simplyTypedLambdaDeBruijne.GeneralContext
\import simplyTypedLambdaDeBruijne.Lambda
\import simplyTypedLambdaDeBruijne.Reduction
\import util.True

\module Church \where {
  \func natSuc {gamma : SimpleContext} : gamma ⊢ Natural --> Natural => lam (succ (# 0 Yes))

  \func ChurchNat (N : Type) : Type => (N --> N) --> N --> N

  \func c_zero {gamma : SimpleContext} {N : Type} : gamma ⊢ ChurchNat N => lam (lam (# 0 Yes))

  \func c_succ {gamma : SimpleContext} {N : Type} : gamma ⊢ ChurchNat N --> ChurchNat N =>
    lam (lam (lam (# 1 Yes ⋅ (# 2 Yes ⋅ # 1 Yes ⋅ # 0 Yes))))

  \func one {gamma : SimpleContext} {N : Type} : gamma ⊢ ChurchNat N => lam (lam (# 1 Yes ⋅ # 0 Yes))

  \func two {gamma : SimpleContext} {N : Type} : gamma ⊢ ChurchNat N => lam (lam (# 1 Yes ⋅ (# 1 Yes ⋅ # 0 Yes)))

  \func plus {gamma : SimpleContext} {N : Type} : gamma ⊢ ChurchNat N --> ChurchNat N --> ChurchNat N =>
    lam (lam (lam (lam (# 3 Yes ⋅ # 1 Yes ⋅ (# 2 Yes ⋅ # 1 Yes ⋅ # 0 Yes)))))

  \func churchToNatural {gamma : SimpleContext} : gamma ⊢ ChurchNat Natural --> Natural
    => lam (# 0 Yes ⋅ natSuc ⋅ zero)

  \func twosuczero : two ⋅ natSuc ⋅ zero ->* {∅} succ (succ zero) =>
    two ⋅ natSuc ⋅ zero ~~< (R-App1 (R-Beta V-lam), idp) >~>
    lam (natSuc ⋅ (natSuc ⋅ # 0 Yes)) ⋅ zero ~~< (R-Beta V-zero, idp) >~>
    natSuc ⋅ (natSuc ⋅ zero) ~~< (R-App2 (R-Beta V-zero) V-lam, idp) >~>
    natSuc ⋅ succ zero ~~< (R-Beta (V-Succ V-zero), idp) >~>
    succ (succ zero) `stop

  \func twosuczero' : two ⋅ natSuc ⋅ zero ->* {∅} succ (succ zero)
    => eval.correct {4}
}