\import Paths.Meta
\import simplyTypedLambdaDeBruijne.GeneralContext
\import simplyTypedLambdaDeBruijne.Lambda

\func SimpleSubst => Subst {_} {⊢}

\func rename {gamma delta : SimpleContext} (h : Rename gamma delta) {A : Type} (t : gamma ⊢ A) : delta ⊢ A
  \elim A, t
    | T, var l => var (h l)
    | --> A B, lam t => lam (rename (extend h) t)
    | B, ⋅ t1 t2 => rename h t1 ⋅ rename h t2
    | Natural, zero => zero
    | Natural, succ t => succ (rename h t)
\where {
  \func renameVar {gamma delta : SimpleContext} (h : Rename gamma delta) {A : Type} {l : gamma ∋ A} : rename h (var l) = var (h l)
    \elim A
      | Natural => idp
      | --> A B => idp
}

\func extends {gamma delta : SimpleContext} (h : Subst {_} {⊢} gamma delta) {B : Type} : Subst {_} {⊢} (gamma ∕ B) (delta ∕ B)
  => \lam {A} l => \case \elim l \with {
    | Z p => var (Z p)
    | S l => rename S (h l)
  }

\func subst {gamma delta : SimpleContext} (s : Subst  {_} {⊢} gamma delta) {A : Type} (h : gamma ⊢ A) : delta ⊢ A
  \elim A, h
    | T, var l => s l
    | --> A B, lam h => lam (subst (extends s) h)
    | B, ⋅ h1 h2 => subst s h1 ⋅ subst s h2
    | Natural, zero => zero
    | Natural, succ h => succ (subst s h)

\instance SimpleSubstOperaions : SubstOperations Term
  | rename => rename
  | subst => subst
  | s-var l => var l
  | extends => extends