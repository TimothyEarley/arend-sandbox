\import Data.Bool
\import identity.NatIdentity
\import limp.Termination
\import simplyTypedLambdaDeBruijne.GeneralContext
\import util.True

{-
- Intrinsicly types lambda calculus
- -}

\data Type
  | Natural
  | \infixr 6 --> (A B : Type)

\func SimpleContext => Context Type
\func SimpleLookup => (∋) {Type}

\data Term \alias \infix 5 ⊢ (c : SimpleContext) (T : Type)
  \elim T
  | Natural => zero
  | Natural => succ (c ⊢ Natural)
  | T => var (c ∋ T)
  | --> A B => lam (c ∕ A ⊢ B)
  | B => app \alias \infixl 6 ⋅ {A : Type} (c ⊢ A --> B) (c ⊢ A)

\func # {c : SimpleContext} (n : Nat) (h : True (suc n <=? Context.length c)) : c ⊢ Context.lookup (toWitness h)
  => var (Context.count (toWitness h))

\meta #0 => # 0 Yes
\meta #1 => # 1 Yes
\meta #2 => # 2 Yes
\meta #3 => # 3 Yes


\func example {A : Type} : ∅ ⊢ A --> A => lam #0