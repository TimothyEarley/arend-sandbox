\import Logic
\import Star
\import simplyTypedLambdaDeBruijne.GeneralContext
\import simplyTypedLambdaDeBruijne.Lambda
\import simplyTypedLambdaDeBruijne.Reduction

\func realiseType (T : Type) : \Set
  | Natural => Nat
  | --> A B => (realiseType A) -> (realiseType B)


\func RealisedContext (c : SimpleContext) => \Pi {A : Type} (c ∋ A) -> realiseType A
\where {
  \func extend {c : SimpleContext} (env : RealisedContext c) {A : Type} (r : realiseType A) {B : Type} (h : c ∕ A ∋ B) : realiseType B
    \elim h
      | Z idp => r
      | S h => env h
}

\func realise {gamma : SimpleContext} {A : Type} (env : RealisedContext gamma) (t : gamma ⊢ A) : realiseType A
  \elim A, t
    | Natural, zero => Nat.zero
    | Natural, succ t => suc (realise env t)
    | T, var l => env l
    | --> A B, lam t => \lam r => realise (RealisedContext.extend env r) t
    | B, ⋅ t1 t2 => (realise env t1) (realise env t2)
