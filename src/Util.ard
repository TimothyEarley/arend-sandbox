\import Data.Fin
\import Data.List
\import Data.Or
\import Logic
\import Logic.Meta
\import Paths

-- Or

\func foldOr {A B C : \Type} (f : A -> C) (g : B -> C) (O : Or A B) : C \elim O
  | inl a => f a
  | inr b => g b

\func fold|| {A B : \Type} {C : \Prop} (f : A -> C) (g : B -> C) (O : A || B) : C \elim O
  | byLeft a => f a
  | byRight b => g b

\func caseListEnd {A : \Type} (l : List A)
  : Or (l = nil) (\Sigma (h : List A) (a : A) (l = h ++ (a :: nil))) \elim l
  | nil => inl idp
  | :: a nil => inr (nil, a, idp)
  | :: a (:: a1 l) => \case caseListEnd (a1 :: l) \with {
    | inl l => contradiction
    | inr r => inr (a :: r.1, r.2, pmap (a :: __) r.3)
  }

-- used when the inference gets it wrong
\func fpred {n : Nat} (a : Fin (suc n)) (h : a /= 0) : Fin n \elim n, a
  | n, zero => contradiction
  | n, suc a => a
\func fsucfpred {n : Nat} {a : Fin (suc n)} {h : a /= 0} : fsuc (fpred a h) = a
  \elim a
    | zero => contradiction
    | suc a => idp
\func finAsNat {n : Nat} (i : Fin n) : Nat \elim n, i
  | suc n, 0 => 0
  | suc n, suc i => suc (finAsNat i)

\func finExpandLeft {n m : Nat} (i : Fin m) : Fin (n Nat.+ m)
  \elim m, i
    | suc m, 0 => 0
    | suc m, suc i => suc (finExpandLeft i)
\where {
  \func equalAsNats {n m : Nat} {i : Fin m} : finAsNat i = {Nat} finAsNat (finExpandLeft {n} {m} i)
    \elim m, i
      | suc m, 0 => idp
      | suc m, suc i => pmap suc equalAsNats
}

\func sigmaMap {A : \Type} {B : A -> \Type}
  {C : \Type} {D : C -> \Type} (f : A -> C) (g : \Pi {a : A} (b : B a) -> D (f a))
               (s : \Sigma (a : A) (B a)): \Sigma (c : C) (D c)
  => (f s.1, g s.2)


\func truncMap {n : Nat} {B : \Pi (i : Fin n) -> \Type}
                (f : \Pi (i : Fin n) -> TruncP (B i)) : TruncP (\Pi (i : Fin n) -> B i)
\elim n
  | 0 => inP (\case __)
  | suc n1 => \case f 0, truncMap (\lam i => f (suc i)) \with {
    | inP bZero, inP f' =>
      inP (\case \elim  __ \with {
        | 0 => bZero
        | suc i' => f' i'
      })
  }